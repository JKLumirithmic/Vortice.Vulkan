// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Vortice.Vulkan;

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtent2D
{
	public uint width;
	public uint height;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtent3D
{
	public uint width;
	public uint height;
	public uint depth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOffset2D
{
	public int x;
	public int y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkOffset3D
{
	public int x;
	public int y;
	public int z;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRect2D
{
	public VkOffset2D offset;
	public VkExtent2D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBaseInStructure
{
	public VkStructureType sType;
	public unsafe VkBaseInStructure* pNext;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBaseOutStructure
{
	public VkStructureType sType;
	public unsafe VkBaseOutStructure* pNext;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkBufferMemoryBarrier()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferMemoryBarrier;
		#else
		this = default;
		sType = VkStructureType.BufferMemoryBarrier;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDispatchIndirectCommand
{
	public uint x;
	public uint y;
	public uint z;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawIndexedIndirectCommand
{
	public uint indexCount;
	public uint instanceCount;
	public uint firstIndex;
	public int vertexOffset;
	public uint firstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawIndirectCommand
{
	public uint vertexCount;
	public uint instanceCount;
	public uint firstVertex;
	public uint firstInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresourceRange
{
	public VkImageAspectFlags aspectMask;
	public uint baseMipLevel;
	public uint levelCount;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;
	public VkImageMemoryBarrier()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageMemoryBarrier;
		#else
		this = default;
		sType = VkStructureType.ImageMemoryBarrier;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryBarrier
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkMemoryBarrier()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryBarrier;
		#else
		this = default;
		sType = VkStructureType.MemoryBarrier;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCacheHeaderVersionOne
{
	public uint headerSize;
	public VkPipelineCacheHeaderVersion headerVersion;
	public uint vendorID;
	public uint deviceID;
	public unsafe fixed byte pipelineCacheUUID[16];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAllocationCallbacks
{
	public unsafe void* pUserData;
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<void*, nuint, nuint, VkSystemAllocationScope, void*> pfnAllocation;
	#else
	public IntPtr pfnAllocation;
	#endif
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<void*, void*, nuint, nuint, VkSystemAllocationScope, void*> pfnReallocation;
	#else
	public IntPtr pfnReallocation;
	#endif
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<void*, void*, void> pfnFree;
	#else
	public IntPtr pfnFree;
	#endif
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation;
	#else
	public IntPtr pfnInternalAllocation;
	#endif
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree;
	#else
	public IntPtr pfnInternalFree;
	#endif
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkApplicationInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pApplicationName;
	public VkVersion applicationVersion;
	public unsafe byte* pEngineName;
	public VkVersion engineVersion;
	public VkVersion apiVersion;
	public VkApplicationInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ApplicationInfo;
		#else
		this = default;
		sType = VkStructureType.ApplicationInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties
{
	public VkFormatFeatureFlags linearTilingFeatures;
	public VkFormatFeatureFlags optimalTilingFeatures;
	public VkFormatFeatureFlags bufferFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatProperties
{
	public VkExtent3D maxExtent;
	public uint maxMipLevels;
	public uint maxArrayLayers;
	public VkSampleCountFlags sampleCounts;
	public ulong maxResourceSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInstanceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkInstanceCreateFlags flags;
	public unsafe VkApplicationInfo* pApplicationInfo;
	public uint enabledLayerCount;
	public unsafe byte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public unsafe byte** ppEnabledExtensionNames;
	public VkInstanceCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.InstanceCreateInfo;
		#else
		this = default;
		sType = VkStructureType.InstanceCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryHeap
{
	public ulong size;
	public VkMemoryHeapFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryType
{
	public VkMemoryPropertyFlags propertyFlags;
	public uint heapIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFeatures
{
	public VkBool32 robustBufferAccess;
	public VkBool32 fullDrawIndexUint32;
	public VkBool32 imageCubeArray;
	public VkBool32 independentBlend;
	public VkBool32 geometryShader;
	public VkBool32 tessellationShader;
	public VkBool32 sampleRateShading;
	public VkBool32 dualSrcBlend;
	public VkBool32 logicOp;
	public VkBool32 multiDrawIndirect;
	public VkBool32 drawIndirectFirstInstance;
	public VkBool32 depthClamp;
	public VkBool32 depthBiasClamp;
	public VkBool32 fillModeNonSolid;
	public VkBool32 depthBounds;
	public VkBool32 wideLines;
	public VkBool32 largePoints;
	public VkBool32 alphaToOne;
	public VkBool32 multiViewport;
	public VkBool32 samplerAnisotropy;
	public VkBool32 textureCompressionETC2;
	public VkBool32 textureCompressionASTC_LDR;
	public VkBool32 textureCompressionBC;
	public VkBool32 occlusionQueryPrecise;
	public VkBool32 pipelineStatisticsQuery;
	public VkBool32 vertexPipelineStoresAndAtomics;
	public VkBool32 fragmentStoresAndAtomics;
	public VkBool32 shaderTessellationAndGeometryPointSize;
	public VkBool32 shaderImageGatherExtended;
	public VkBool32 shaderStorageImageExtendedFormats;
	public VkBool32 shaderStorageImageMultisample;
	public VkBool32 shaderStorageImageReadWithoutFormat;
	public VkBool32 shaderStorageImageWriteWithoutFormat;
	public VkBool32 shaderUniformBufferArrayDynamicIndexing;
	public VkBool32 shaderSampledImageArrayDynamicIndexing;
	public VkBool32 shaderStorageBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageImageArrayDynamicIndexing;
	public VkBool32 shaderClipDistance;
	public VkBool32 shaderCullDistance;
	public VkBool32 shaderFloat64;
	public VkBool32 shaderInt64;
	public VkBool32 shaderInt16;
	public VkBool32 shaderResourceResidency;
	public VkBool32 shaderResourceMinLod;
	public VkBool32 sparseBinding;
	public VkBool32 sparseResidencyBuffer;
	public VkBool32 sparseResidencyImage2D;
	public VkBool32 sparseResidencyImage3D;
	public VkBool32 sparseResidency2Samples;
	public VkBool32 sparseResidency4Samples;
	public VkBool32 sparseResidency8Samples;
	public VkBool32 sparseResidency16Samples;
	public VkBool32 sparseResidencyAliased;
	public VkBool32 variableMultisampleRate;
	public VkBool32 inheritedQueries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLimits
{
	public uint maxImageDimension1D;
	public uint maxImageDimension2D;
	public uint maxImageDimension3D;
	public uint maxImageDimensionCube;
	public uint maxImageArrayLayers;
	public uint maxTexelBufferElements;
	public uint maxUniformBufferRange;
	public uint maxStorageBufferRange;
	public uint maxPushConstantsSize;
	public uint maxMemoryAllocationCount;
	public uint maxSamplerAllocationCount;
	public ulong bufferImageGranularity;
	public ulong sparseAddressSpaceSize;
	public uint maxBoundDescriptorSets;
	public uint maxPerStageDescriptorSamplers;
	public uint maxPerStageDescriptorUniformBuffers;
	public uint maxPerStageDescriptorStorageBuffers;
	public uint maxPerStageDescriptorSampledImages;
	public uint maxPerStageDescriptorStorageImages;
	public uint maxPerStageDescriptorInputAttachments;
	public uint maxPerStageResources;
	public uint maxDescriptorSetSamplers;
	public uint maxDescriptorSetUniformBuffers;
	public uint maxDescriptorSetUniformBuffersDynamic;
	public uint maxDescriptorSetStorageBuffers;
	public uint maxDescriptorSetStorageBuffersDynamic;
	public uint maxDescriptorSetSampledImages;
	public uint maxDescriptorSetStorageImages;
	public uint maxDescriptorSetInputAttachments;
	public uint maxVertexInputAttributes;
	public uint maxVertexInputBindings;
	public uint maxVertexInputAttributeOffset;
	public uint maxVertexInputBindingStride;
	public uint maxVertexOutputComponents;
	public uint maxTessellationGenerationLevel;
	public uint maxTessellationPatchSize;
	public uint maxTessellationControlPerVertexInputComponents;
	public uint maxTessellationControlPerVertexOutputComponents;
	public uint maxTessellationControlPerPatchOutputComponents;
	public uint maxTessellationControlTotalOutputComponents;
	public uint maxTessellationEvaluationInputComponents;
	public uint maxTessellationEvaluationOutputComponents;
	public uint maxGeometryShaderInvocations;
	public uint maxGeometryInputComponents;
	public uint maxGeometryOutputComponents;
	public uint maxGeometryOutputVertices;
	public uint maxGeometryTotalOutputComponents;
	public uint maxFragmentInputComponents;
	public uint maxFragmentOutputAttachments;
	public uint maxFragmentDualSrcAttachments;
	public uint maxFragmentCombinedOutputResources;
	public uint maxComputeSharedMemorySize;
	public unsafe fixed uint maxComputeWorkGroupCount[3];
	public uint maxComputeWorkGroupInvocations;
	public unsafe fixed uint maxComputeWorkGroupSize[3];
	public uint subPixelPrecisionBits;
	public uint subTexelPrecisionBits;
	public uint mipmapPrecisionBits;
	public uint maxDrawIndexedIndexValue;
	public uint maxDrawIndirectCount;
	public float maxSamplerLodBias;
	public float maxSamplerAnisotropy;
	public uint maxViewports;
	public unsafe fixed uint maxViewportDimensions[2];
	public unsafe fixed float viewportBoundsRange[2];
	public uint viewportSubPixelBits;
	public nuint minMemoryMapAlignment;
	public ulong minTexelBufferOffsetAlignment;
	public ulong minUniformBufferOffsetAlignment;
	public ulong minStorageBufferOffsetAlignment;
	public int minTexelOffset;
	public uint maxTexelOffset;
	public int minTexelGatherOffset;
	public uint maxTexelGatherOffset;
	public float minInterpolationOffset;
	public float maxInterpolationOffset;
	public uint subPixelInterpolationOffsetBits;
	public uint maxFramebufferWidth;
	public uint maxFramebufferHeight;
	public uint maxFramebufferLayers;
	public VkSampleCountFlags framebufferColorSampleCounts;
	public VkSampleCountFlags framebufferDepthSampleCounts;
	public VkSampleCountFlags framebufferStencilSampleCounts;
	public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
	public uint maxColorAttachments;
	public VkSampleCountFlags sampledImageColorSampleCounts;
	public VkSampleCountFlags sampledImageIntegerSampleCounts;
	public VkSampleCountFlags sampledImageDepthSampleCounts;
	public VkSampleCountFlags sampledImageStencilSampleCounts;
	public VkSampleCountFlags storageImageSampleCounts;
	public uint maxSampleMaskWords;
	public VkBool32 timestampComputeAndGraphics;
	public float timestampPeriod;
	public uint maxClipDistances;
	public uint maxCullDistances;
	public uint maxCombinedClipAndCullDistances;
	public uint discreteQueuePriorities;
	public unsafe fixed float pointSizeRange[2];
	public unsafe fixed float lineWidthRange[2];
	public float pointSizeGranularity;
	public float lineWidthGranularity;
	public VkBool32 strictLines;
	public VkBool32 standardSampleLocations;
	public ulong optimalBufferCopyOffsetAlignment;
	public ulong optimalBufferCopyRowPitchAlignment;
	public ulong nonCoherentAtomSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryProperties
{
	public uint memoryTypeCount;
	public VkMemoryType memoryTypes_0;
	public VkMemoryType memoryTypes_1;
	public VkMemoryType memoryTypes_2;
	public VkMemoryType memoryTypes_3;
	public VkMemoryType memoryTypes_4;
	public VkMemoryType memoryTypes_5;
	public VkMemoryType memoryTypes_6;
	public VkMemoryType memoryTypes_7;
	public VkMemoryType memoryTypes_8;
	public VkMemoryType memoryTypes_9;
	public VkMemoryType memoryTypes_10;
	public VkMemoryType memoryTypes_11;
	public VkMemoryType memoryTypes_12;
	public VkMemoryType memoryTypes_13;
	public VkMemoryType memoryTypes_14;
	public VkMemoryType memoryTypes_15;
	public VkMemoryType memoryTypes_16;
	public VkMemoryType memoryTypes_17;
	public VkMemoryType memoryTypes_18;
	public VkMemoryType memoryTypes_19;
	public VkMemoryType memoryTypes_20;
	public VkMemoryType memoryTypes_21;
	public VkMemoryType memoryTypes_22;
	public VkMemoryType memoryTypes_23;
	public VkMemoryType memoryTypes_24;
	public VkMemoryType memoryTypes_25;
	public VkMemoryType memoryTypes_26;
	public VkMemoryType memoryTypes_27;
	public VkMemoryType memoryTypes_28;
	public VkMemoryType memoryTypes_29;
	public VkMemoryType memoryTypes_30;
	public VkMemoryType memoryTypes_31;
	public uint memoryHeapCount;
	public VkMemoryHeap memoryHeaps_0;
	public VkMemoryHeap memoryHeaps_1;
	public VkMemoryHeap memoryHeaps_2;
	public VkMemoryHeap memoryHeaps_3;
	public VkMemoryHeap memoryHeaps_4;
	public VkMemoryHeap memoryHeaps_5;
	public VkMemoryHeap memoryHeaps_6;
	public VkMemoryHeap memoryHeaps_7;
	public VkMemoryHeap memoryHeaps_8;
	public VkMemoryHeap memoryHeaps_9;
	public VkMemoryHeap memoryHeaps_10;
	public VkMemoryHeap memoryHeaps_11;
	public VkMemoryHeap memoryHeaps_12;
	public VkMemoryHeap memoryHeaps_13;
	public VkMemoryHeap memoryHeaps_14;
	public VkMemoryHeap memoryHeaps_15;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSparseProperties
{
	public VkBool32 residencyStandard2DBlockShape;
	public VkBool32 residencyStandard2DMultisampleBlockShape;
	public VkBool32 residencyStandard3DBlockShape;
	public VkBool32 residencyAlignedMipSize;
	public VkBool32 residencyNonResidentStrict;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProperties
{
	public VkVersion apiVersion;
	public uint driverVersion;
	public uint vendorID;
	public uint deviceID;
	public VkPhysicalDeviceType deviceType;
	public unsafe fixed byte deviceName[256];
	public unsafe fixed byte pipelineCacheUUID[16];
	public VkPhysicalDeviceLimits limits;
	public VkPhysicalDeviceSparseProperties sparseProperties;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyProperties
{
	public VkQueueFlags queueFlags;
	public uint queueCount;
	public uint timestampValidBits;
	public VkExtent3D minImageTransferGranularity;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueCount;
	public unsafe float* pQueuePriorities;
	public VkDeviceQueueCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceQueueCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceQueueCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceCreateFlags flags;
	public uint queueCreateInfoCount;
	public unsafe VkDeviceQueueCreateInfo* pQueueCreateInfos;
	public uint enabledLayerCount;
	public unsafe byte** ppEnabledLayerNames;
	public uint enabledExtensionCount;
	public unsafe byte** ppEnabledExtensionNames;
	public unsafe VkPhysicalDeviceFeatures* pEnabledFeatures;
	public VkDeviceCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExtensionProperties
{
	public unsafe fixed byte extensionName[256];
	public VkVersion specVersion;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkLayerProperties
{
	public unsafe fixed byte layerName[256];
	public VkVersion specVersion;
	public uint implementationVersion;
	public unsafe fixed byte description[256];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public unsafe VkPipelineStageFlags* pWaitDstStageMask;
	public uint commandBufferCount;
	public unsafe VkCommandBuffer* pCommandBuffers;
	public uint signalSemaphoreCount;
	public unsafe VkSemaphore* pSignalSemaphores;
	public VkSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubmitInfo;
		#else
		this = default;
		sType = VkStructureType.SubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMappedMemoryRange
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public ulong offset;
	public ulong size;
	public VkMappedMemoryRange()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MappedMemoryRange;
		#else
		this = default;
		sType = VkStructureType.MappedMemoryRange;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong allocationSize;
	public uint memoryTypeIndex;
	public VkMemoryAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.MemoryAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryRequirements
{
	public ulong size;
	public ulong alignment;
	public uint memoryTypeBits;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseMemoryBind
{
	public ulong resourceOffset;
	public ulong size;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseBufferMemoryBindInfo
{
	public VkBuffer buffer;
	public uint bindCount;
	public unsafe VkSparseMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageOpaqueMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public unsafe VkSparseMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresource
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint arrayLayer;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryBind
{
	public VkImageSubresource subresource;
	public VkOffset3D offset;
	public VkExtent3D extent;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkSparseMemoryBindFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryBindInfo
{
	public VkImage image;
	public uint bindCount;
	public unsafe VkSparseImageMemoryBind* pBinds;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindSparseInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public uint bufferBindCount;
	public unsafe VkSparseBufferMemoryBindInfo* pBufferBinds;
	public uint imageOpaqueBindCount;
	public unsafe VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
	public uint imageBindCount;
	public unsafe VkSparseImageMemoryBindInfo* pImageBinds;
	public uint signalSemaphoreCount;
	public unsafe VkSemaphore* pSignalSemaphores;
	public VkBindSparseInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindSparseInfo;
		#else
		this = default;
		sType = VkStructureType.BindSparseInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageFormatProperties
{
	public VkImageAspectFlags aspectMask;
	public VkExtent3D imageGranularity;
	public VkSparseImageFormatFlags flags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryRequirements
{
	public VkSparseImageFormatProperties formatProperties;
	public uint imageMipTailFirstLod;
	public ulong imageMipTailSize;
	public ulong imageMipTailOffset;
	public ulong imageMipTailStride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFenceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFenceCreateFlags flags;
	public VkFenceCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FenceCreateInfo;
		#else
		this = default;
		sType = VkStructureType.FenceCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreCreateFlags flags;
	public VkSemaphoreCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreCreateInfo;
		#else
		this = default;
		sType = VkStructureType.SemaphoreCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkEventCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkEventCreateFlags flags;
	public VkEventCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.EventCreateInfo;
		#else
		this = default;
		sType = VkStructureType.EventCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueryPoolCreateFlags flags;
	public VkQueryType queryType;
	public uint queryCount;
	public VkQueryPipelineStatisticFlags pipelineStatistics;
	public VkQueryPoolCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueryPoolCreateInfo;
		#else
		this = default;
		sType = VkStructureType.QueryPoolCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferCreateFlags flags;
	public ulong size;
	public VkBufferUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkBufferCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferCreateInfo;
		#else
		this = default;
		sType = VkStructureType.BufferCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferViewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferViewCreateFlags flags;
	public VkBuffer buffer;
	public VkFormat format;
	public ulong offset;
	public ulong range;
	public VkBufferViewCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferViewCreateInfo;
		#else
		this = default;
		sType = VkStructureType.BufferViewCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCreateFlags flags;
	public VkImageType imageType;
	public VkFormat format;
	public VkExtent3D extent;
	public uint mipLevels;
	public uint arrayLayers;
	public VkSampleCountFlags samples;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkImageLayout initialLayout;
	public VkImageCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ImageCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubresourceLayout
{
	public ulong offset;
	public ulong size;
	public ulong rowPitch;
	public ulong arrayPitch;
	public ulong depthPitch;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkComponentMapping
{
	public VkComponentSwizzle r;
	public VkComponentSwizzle g;
	public VkComponentSwizzle b;
	public VkComponentSwizzle a;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageViewCreateFlags flags;
	public VkImage image;
	public VkImageViewType viewType;
	public VkFormat format;
	public VkComponentMapping components;
	public VkImageSubresourceRange subresourceRange;
	public VkImageViewCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ImageViewCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderModuleCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderModuleCreateFlags flags;
	public nuint codeSize;
	public unsafe uint* pCode;
	public VkShaderModuleCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ShaderModuleCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ShaderModuleCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCacheCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCacheCreateFlags flags;
	public nuint initialDataSize;
	public unsafe void* pInitialData;
	public VkPipelineCacheCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCacheCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineCacheCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSpecializationMapEntry
{
	public uint constantID;
	public uint offset;
	public nuint size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSpecializationInfo
{
	public uint mapEntryCount;
	public unsafe VkSpecializationMapEntry* pMapEntries;
	public nuint dataSize;
	public unsafe void* pData;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineShaderStageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineShaderStageCreateFlags flags;
	public VkShaderStageFlags stage;
	public VkShaderModule module;
	public unsafe byte* pName;
	public unsafe VkSpecializationInfo* pSpecializationInfo;
	public VkPipelineShaderStageCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineShaderStageCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineShaderStageCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkComputePipelineCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public VkPipelineShaderStageCreateInfo stage;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;
	public VkComputePipelineCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ComputePipelineCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ComputePipelineCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDescription
{
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputAttributeDescription
{
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineVertexInputStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineVertexInputStateCreateFlags flags;
	public uint vertexBindingDescriptionCount;
	public unsafe VkVertexInputBindingDescription* pVertexBindingDescriptions;
	public uint vertexAttributeDescriptionCount;
	public unsafe VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
	public VkPipelineVertexInputStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineVertexInputStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineVertexInputStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineInputAssemblyStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineInputAssemblyStateCreateFlags flags;
	public VkPrimitiveTopology topology;
	public VkBool32 primitiveRestartEnable;
	public VkPipelineInputAssemblyStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineInputAssemblyStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineInputAssemblyStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineTessellationStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineTessellationStateCreateFlags flags;
	public uint patchControlPoints;
	public VkPipelineTessellationStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineTessellationStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineTessellationStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewport
{
	public float x;
	public float y;
	public float width;
	public float height;
	public float minDepth;
	public float maxDepth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineViewportStateCreateFlags flags;
	public uint viewportCount;
	public unsafe VkViewport* pViewports;
	public uint scissorCount;
	public unsafe VkRect2D* pScissors;
	public VkPipelineViewportStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationStateCreateFlags flags;
	public VkBool32 depthClampEnable;
	public VkBool32 rasterizerDiscardEnable;
	public VkPolygonMode polygonMode;
	public VkCullModeFlags cullMode;
	public VkFrontFace frontFace;
	public VkBool32 depthBiasEnable;
	public float depthBiasConstantFactor;
	public float depthBiasClamp;
	public float depthBiasSlopeFactor;
	public float lineWidth;
	public VkPipelineRasterizationStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineMultisampleStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineMultisampleStateCreateFlags flags;
	public VkSampleCountFlags rasterizationSamples;
	public VkBool32 sampleShadingEnable;
	public float minSampleShading;
	public unsafe uint* pSampleMask;
	public VkBool32 alphaToCoverageEnable;
	public VkBool32 alphaToOneEnable;
	public VkPipelineMultisampleStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineMultisampleStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineMultisampleStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkStencilOpState
{
	public VkStencilOp failOp;
	public VkStencilOp passOp;
	public VkStencilOp depthFailOp;
	public VkCompareOp compareOp;
	public uint compareMask;
	public uint writeMask;
	public uint reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDepthStencilStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDepthStencilStateCreateFlags flags;
	public VkBool32 depthTestEnable;
	public VkBool32 depthWriteEnable;
	public VkCompareOp depthCompareOp;
	public VkBool32 depthBoundsTestEnable;
	public VkBool32 stencilTestEnable;
	public VkStencilOpState front;
	public VkStencilOpState back;
	public float minDepthBounds;
	public float maxDepthBounds;
	public VkPipelineDepthStencilStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineDepthStencilStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineDepthStencilStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendAttachmentState
{
	public VkBool32 blendEnable;
	public VkBlendFactor srcColorBlendFactor;
	public VkBlendFactor dstColorBlendFactor;
	public VkBlendOp colorBlendOp;
	public VkBlendFactor srcAlphaBlendFactor;
	public VkBlendFactor dstAlphaBlendFactor;
	public VkBlendOp alphaBlendOp;
	public VkColorComponentFlags colorWriteMask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineColorBlendStateCreateFlags flags;
	public VkBool32 logicOpEnable;
	public VkLogicOp logicOp;
	public uint attachmentCount;
	public unsafe VkPipelineColorBlendAttachmentState* pAttachments;
	public unsafe fixed float blendConstants[4];
	public VkPipelineColorBlendStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineColorBlendStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineColorBlendStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDynamicStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDynamicStateCreateFlags flags;
	public uint dynamicStateCount;
	public unsafe VkDynamicState* pDynamicStates;
	public VkPipelineDynamicStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineDynamicStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineDynamicStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public unsafe VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
	public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;
	public unsafe VkPipelineViewportStateCreateInfo* pViewportState;
	public unsafe VkPipelineRasterizationStateCreateInfo* pRasterizationState;
	public unsafe VkPipelineMultisampleStateCreateInfo* pMultisampleState;
	public unsafe VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
	public unsafe VkPipelineColorBlendStateCreateInfo* pColorBlendState;
	public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;
	public VkGraphicsPipelineCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GraphicsPipelineCreateInfo;
		#else
		this = default;
		sType = VkStructureType.GraphicsPipelineCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPushConstantRange
{
	public VkShaderStageFlags stageFlags;
	public uint offset;
	public uint size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineLayoutCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineLayoutCreateFlags flags;
	public uint setLayoutCount;
	public unsafe VkDescriptorSetLayout* pSetLayouts;
	public uint pushConstantRangeCount;
	public unsafe VkPushConstantRange* pPushConstantRanges;
	public VkPipelineLayoutCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineLayoutCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineLayoutCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerCreateFlags flags;
	public VkFilter magFilter;
	public VkFilter minFilter;
	public VkSamplerMipmapMode mipmapMode;
	public VkSamplerAddressMode addressModeU;
	public VkSamplerAddressMode addressModeV;
	public VkSamplerAddressMode addressModeW;
	public float mipLodBias;
	public VkBool32 anisotropyEnable;
	public float maxAnisotropy;
	public VkBool32 compareEnable;
	public VkCompareOp compareOp;
	public float minLod;
	public float maxLod;
	public VkBorderColor borderColor;
	public VkBool32 unnormalizedCoordinates;
	public VkSamplerCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerCreateInfo;
		#else
		this = default;
		sType = VkStructureType.SamplerCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyDescriptorSet
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSet srcSet;
	public uint srcBinding;
	public uint srcArrayElement;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkCopyDescriptorSet()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyDescriptorSet;
		#else
		this = default;
		sType = VkStructureType.CopyDescriptorSet;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorBufferInfo
{
	public VkBuffer buffer;
	public ulong offset;
	public ulong range;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorImageInfo
{
	public VkSampler sampler;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolSize
{
	public VkDescriptorType type;
	public uint descriptorCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorPoolCreateFlags flags;
	public uint maxSets;
	public uint poolSizeCount;
	public unsafe VkDescriptorPoolSize* pPoolSizes;
	public VkDescriptorPoolCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorPoolCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorPoolCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorPool descriptorPool;
	public uint descriptorSetCount;
	public unsafe VkDescriptorSetLayout* pSetLayouts;
	public VkDescriptorSetAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutBinding
{
	public uint binding;
	public VkDescriptorType descriptorType;
	public uint descriptorCount;
	public VkShaderStageFlags stageFlags;
	public unsafe VkSampler* pImmutableSamplers;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSetLayoutCreateFlags flags;
	public uint bindingCount;
	public unsafe VkDescriptorSetLayoutBinding* pBindings;
	public VkDescriptorSetLayoutCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetLayoutCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetLayoutCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSet
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSet dstSet;
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public unsafe VkDescriptorImageInfo* pImageInfo;
	public unsafe VkDescriptorBufferInfo* pBufferInfo;
	public unsafe VkBufferView* pTexelBufferView;
	public VkWriteDescriptorSet()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.WriteDescriptorSet;
		#else
		this = default;
		sType = VkStructureType.WriteDescriptorSet;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescription
{
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReference
{
	public uint attachment;
	public VkImageLayout layout;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFramebufferCreateFlags flags;
	public VkRenderPass renderPass;
	public uint attachmentCount;
	public unsafe VkImageView* pAttachments;
	public uint width;
	public uint height;
	public uint layers;
	public VkFramebufferCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FramebufferCreateInfo;
		#else
		this = default;
		sType = VkStructureType.FramebufferCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescription
{
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint inputAttachmentCount;
	public unsafe VkAttachmentReference* pInputAttachments;
	public uint colorAttachmentCount;
	public unsafe VkAttachmentReference* pColorAttachments;
	public unsafe VkAttachmentReference* pResolveAttachments;
	public unsafe VkAttachmentReference* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public unsafe uint* pPreserveAttachments;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDependency
{
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public unsafe VkAttachmentDescription* pAttachments;
	public uint subpassCount;
	public unsafe VkSubpassDescription* pSubpasses;
	public uint dependencyCount;
	public unsafe VkSubpassDependency* pDependencies;
	public VkRenderPassCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassCreateInfo;
		#else
		this = default;
		sType = VkStructureType.RenderPassCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandPoolCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandPoolCreateFlags flags;
	public uint queueFamilyIndex;
	public VkCommandPoolCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandPoolCreateInfo;
		#else
		this = default;
		sType = VkStructureType.CommandPoolCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandPool commandPool;
	public VkCommandBufferLevel level;
	public uint commandBufferCount;
	public VkCommandBufferAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.CommandBufferAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkFramebuffer framebuffer;
	public VkBool32 occlusionQueryEnable;
	public VkQueryControlFlags queryFlags;
	public VkQueryPipelineStatisticFlags pipelineStatistics;
	public VkCommandBufferInheritanceInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferInheritanceInfo;
		#else
		this = default;
		sType = VkStructureType.CommandBufferInheritanceInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandBufferUsageFlags flags;
	public unsafe VkCommandBufferInheritanceInfo* pInheritanceInfo;
	public VkCommandBufferBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferBeginInfo;
		#else
		this = default;
		sType = VkStructureType.CommandBufferBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCopy
{
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSubresourceLayers
{
	public VkImageAspectFlags aspectMask;
	public uint mipLevel;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferImageCopy
{
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
}

[StructLayout(LayoutKind.Sequential)]
public readonly partial struct VkClearDepthStencilValue
{
	public readonly float depth;
	public readonly uint stencil;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkClearValue
{
	[FieldOffset(0)]
	public VkClearColorValue color;
	[FieldOffset(0)]
	public VkClearDepthStencilValue depthStencil;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkClearAttachment
{
	public VkImageAspectFlags aspectMask;
	public uint colorAttachment;
	public VkClearValue clearValue;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkClearRect
{
	public VkRect2D rect;
	public uint baseArrayLayer;
	public uint layerCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageBlit
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffsets_0;
	public VkOffset3D srcOffsets_1;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffsets_0;
	public VkOffset3D dstOffsets_1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCopy
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageResolve
{
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public VkFramebuffer framebuffer;
	public VkRect2D renderArea;
	public uint clearValueCount;
	public unsafe VkClearValue* pClearValues;
	public VkRenderPassBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassBeginInfo;
		#else
		this = default;
		sType = VkStructureType.RenderPassBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint subgroupSize;
	public VkShaderStageFlags supportedStages;
	public VkSubgroupFeatureFlags supportedOperations;
	public VkBool32 quadOperationsInAllStages;
	public VkPhysicalDeviceSubgroupProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSubgroupProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSubgroupProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindBufferMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkBindBufferMemoryInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindBufferMemoryInfo;
		#else
		this = default;
		sType = VkStructureType.BindBufferMemoryInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public VkBindImageMemoryInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindImageMemoryInfo;
		#else
		this = default;
		sType = VkStructureType.BindImageMemoryInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice16BitStorageFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;
	public VkPhysicalDevice16BitStorageFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevice16BitStorageFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevice16BitStorageFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryDedicatedRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 prefersDedicatedAllocation;
	public VkBool32 requiresDedicatedAllocation;
	public VkMemoryDedicatedRequirements()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryDedicatedRequirements;
		#else
		this = default;
		sType = VkStructureType.MemoryDedicatedRequirements;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryDedicatedAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkBuffer buffer;
	public VkMemoryDedicatedAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryDedicatedAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.MemoryDedicatedAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryAllocateFlagsInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryAllocateFlags flags;
	public uint deviceMask;
	public VkMemoryAllocateFlagsInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryAllocateFlagsInfo;
		#else
		this = default;
		sType = VkStructureType.MemoryAllocateFlagsInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupRenderPassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceMask;
	public uint deviceRenderAreaCount;
	public unsafe VkRect2D* pDeviceRenderAreas;
	public VkDeviceGroupRenderPassBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupRenderPassBeginInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupRenderPassBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupCommandBufferBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceMask;
	public VkDeviceGroupCommandBufferBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupCommandBufferBeginInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupCommandBufferBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe uint* pWaitSemaphoreDeviceIndices;
	public uint commandBufferCount;
	public unsafe uint* pCommandBufferDeviceMasks;
	public uint signalSemaphoreCount;
	public unsafe uint* pSignalSemaphoreDeviceIndices;
	public VkDeviceGroupSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupSubmitInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupSubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupBindSparseInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint resourceDeviceIndex;
	public uint memoryDeviceIndex;
	public VkDeviceGroupBindSparseInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupBindSparseInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupBindSparseInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindBufferMemoryDeviceGroupInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;
	public VkBindBufferMemoryDeviceGroupInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindBufferMemoryDeviceGroupInfo;
		#else
		this = default;
		sType = VkStructureType.BindBufferMemoryDeviceGroupInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemoryDeviceGroupInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;
	public uint splitInstanceBindRegionCount;
	public unsafe VkRect2D* pSplitInstanceBindRegions;
	public VkBindImageMemoryDeviceGroupInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindImageMemoryDeviceGroupInfo;
		#else
		this = default;
		sType = VkStructureType.BindImageMemoryDeviceGroupInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGroupProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint physicalDeviceCount;
	public VkPhysicalDevice physicalDevices_0;
	public VkPhysicalDevice physicalDevices_1;
	public VkPhysicalDevice physicalDevices_2;
	public VkPhysicalDevice physicalDevices_3;
	public VkPhysicalDevice physicalDevices_4;
	public VkPhysicalDevice physicalDevices_5;
	public VkPhysicalDevice physicalDevices_6;
	public VkPhysicalDevice physicalDevices_7;
	public VkPhysicalDevice physicalDevices_8;
	public VkPhysicalDevice physicalDevices_9;
	public VkPhysicalDevice physicalDevices_10;
	public VkPhysicalDevice physicalDevices_11;
	public VkPhysicalDevice physicalDevices_12;
	public VkPhysicalDevice physicalDevices_13;
	public VkPhysicalDevice physicalDevices_14;
	public VkPhysicalDevice physicalDevices_15;
	public VkPhysicalDevice physicalDevices_16;
	public VkPhysicalDevice physicalDevices_17;
	public VkPhysicalDevice physicalDevices_18;
	public VkPhysicalDevice physicalDevices_19;
	public VkPhysicalDevice physicalDevices_20;
	public VkPhysicalDevice physicalDevices_21;
	public VkPhysicalDevice physicalDevices_22;
	public VkPhysicalDevice physicalDevices_23;
	public VkPhysicalDevice physicalDevices_24;
	public VkPhysicalDevice physicalDevices_25;
	public VkPhysicalDevice physicalDevices_26;
	public VkPhysicalDevice physicalDevices_27;
	public VkPhysicalDevice physicalDevices_28;
	public VkPhysicalDevice physicalDevices_29;
	public VkPhysicalDevice physicalDevices_30;
	public VkPhysicalDevice physicalDevices_31;
	public VkBool32 subsetAllocation;
	public VkPhysicalDeviceGroupProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceGroupProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceGroupProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupDeviceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint physicalDeviceCount;
	public unsafe VkPhysicalDevice* pPhysicalDevices;
	public VkDeviceGroupDeviceCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupDeviceCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupDeviceCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public VkBufferMemoryRequirementsInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferMemoryRequirementsInfo2;
		#else
		this = default;
		sType = VkStructureType.BufferMemoryRequirementsInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkImageMemoryRequirementsInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageMemoryRequirementsInfo2;
		#else
		this = default;
		sType = VkStructureType.ImageMemoryRequirementsInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSparseMemoryRequirementsInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkImageSparseMemoryRequirementsInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageSparseMemoryRequirementsInfo2;
		#else
		this = default;
		sType = VkStructureType.ImageSparseMemoryRequirementsInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryRequirements2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryRequirements memoryRequirements;
	public VkMemoryRequirements2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryRequirements2;
		#else
		this = default;
		sType = VkStructureType.MemoryRequirements2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageMemoryRequirements2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSparseImageMemoryRequirements memoryRequirements;
	public VkSparseImageMemoryRequirements2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SparseImageMemoryRequirements2;
		#else
		this = default;
		sType = VkStructureType.SparseImageMemoryRequirements2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFeatures2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceFeatures features;
	public VkPhysicalDeviceFeatures2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFeatures2;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFeatures2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceProperties properties;
	public VkPhysicalDeviceProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceProperties2;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormatProperties formatProperties;
	public VkFormatProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FormatProperties2;
		#else
		this = default;
		sType = VkStructureType.FormatProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageFormatProperties imageFormatProperties;
	public VkImageFormatProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageFormatProperties2;
		#else
		this = default;
		sType = VkStructureType.ImageFormatProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageFormatInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkImageTiling tiling;
	public VkImageUsageFlags usage;
	public VkImageCreateFlags flags;
	public VkPhysicalDeviceImageFormatInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImageFormatInfo2;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImageFormatInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueueFamilyProperties queueFamilyProperties;
	public VkQueueFamilyProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueueFamilyProperties2;
		#else
		this = default;
		sType = VkStructureType.QueueFamilyProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPhysicalDeviceMemoryProperties memoryProperties;
	public VkPhysicalDeviceMemoryProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMemoryProperties2;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMemoryProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSparseImageFormatProperties2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSparseImageFormatProperties properties;
	public VkSparseImageFormatProperties2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SparseImageFormatProperties2;
		#else
		this = default;
		sType = VkStructureType.SparseImageFormatProperties2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSparseImageFormatInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkImageType type;
	public VkSampleCountFlags samples;
	public VkImageUsageFlags usage;
	public VkImageTiling tiling;
	public VkPhysicalDeviceSparseImageFormatInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSparseImageFormatInfo2;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSparseImageFormatInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePointClippingProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPointClippingBehavior pointClippingBehavior;
	public VkPhysicalDevicePointClippingProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePointClippingProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePointClippingProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInputAttachmentAspectReference
{
	public uint subpass;
	public uint inputAttachmentIndex;
	public VkImageAspectFlags aspectMask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassInputAttachmentAspectCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint aspectReferenceCount;
	public unsafe VkInputAttachmentAspectReference* pAspectReferences;
	public VkRenderPassInputAttachmentAspectCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassInputAttachmentAspectCreateInfo;
		#else
		this = default;
		sType = VkStructureType.RenderPassInputAttachmentAspectCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewUsageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags usage;
	public VkImageViewUsageCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewUsageCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ImageViewUsageCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineTessellationDomainOriginStateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkTessellationDomainOrigin domainOrigin;
	public VkPipelineTessellationDomainOriginStateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineTessellationDomainOriginStateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineTessellationDomainOriginStateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassMultiviewCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint subpassCount;
	public unsafe uint* pViewMasks;
	public uint dependencyCount;
	public unsafe int* pViewOffsets;
	public uint correlationMaskCount;
	public unsafe uint* pCorrelationMasks;
	public VkRenderPassMultiviewCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassMultiviewCreateInfo;
		#else
		this = default;
		sType = VkStructureType.RenderPassMultiviewCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;
	public VkPhysicalDeviceMultiviewFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMultiviewFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMultiviewFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;
	public VkPhysicalDeviceMultiviewProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMultiviewProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMultiviewProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVariablePointersFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;
	public VkPhysicalDeviceVariablePointersFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVariablePointersFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVariablePointersFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProtectedMemoryFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedMemory;
	public VkPhysicalDeviceProtectedMemoryFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceProtectedMemoryFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceProtectedMemoryFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProtectedMemoryProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedNoFault;
	public VkPhysicalDeviceProtectedMemoryProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceProtectedMemoryProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceProtectedMemoryProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceQueueCreateFlags flags;
	public uint queueFamilyIndex;
	public uint queueIndex;
	public VkDeviceQueueInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceQueueInfo2;
		#else
		this = default;
		sType = VkStructureType.DeviceQueueInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkProtectedSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 protectedSubmit;
	public VkProtectedSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ProtectedSubmitInfo;
		#else
		this = default;
		sType = VkStructureType.ProtectedSubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkSamplerYcbcrModelConversion ycbcrModel;
	public VkSamplerYcbcrRange ycbcrRange;
	public VkComponentMapping components;
	public VkChromaLocation xChromaOffset;
	public VkChromaLocation yChromaOffset;
	public VkFilter chromaFilter;
	public VkBool32 forceExplicitReconstruction;
	public VkSamplerYcbcrConversionCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerYcbcrConversionCreateInfo;
		#else
		this = default;
		sType = VkStructureType.SamplerYcbcrConversionCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerYcbcrConversion conversion;
	public VkSamplerYcbcrConversionInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerYcbcrConversionInfo;
		#else
		this = default;
		sType = VkStructureType.SamplerYcbcrConversionInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImagePlaneMemoryInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageAspectFlags planeAspect;
	public VkBindImagePlaneMemoryInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindImagePlaneMemoryInfo;
		#else
		this = default;
		sType = VkStructureType.BindImagePlaneMemoryInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImagePlaneMemoryRequirementsInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageAspectFlags planeAspect;
	public VkImagePlaneMemoryRequirementsInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImagePlaneMemoryRequirementsInfo;
		#else
		this = default;
		sType = VkStructureType.ImagePlaneMemoryRequirementsInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 samplerYcbcrConversion;
	public VkPhysicalDeviceSamplerYcbcrConversionFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSamplerYcbcrConversionFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerYcbcrConversionImageFormatProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint combinedImageSamplerDescriptorCount;
	public VkSamplerYcbcrConversionImageFormatProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerYcbcrConversionImageFormatProperties;
		#else
		this = default;
		sType = VkStructureType.SamplerYcbcrConversionImageFormatProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorUpdateTemplateEntry
{
	public uint dstBinding;
	public uint dstArrayElement;
	public uint descriptorCount;
	public VkDescriptorType descriptorType;
	public nuint offset;
	public nuint stride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorUpdateTemplateCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorUpdateTemplateCreateFlags flags;
	public uint descriptorUpdateEntryCount;
	public unsafe VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
	public VkDescriptorUpdateTemplateType templateType;
	public VkDescriptorSetLayout descriptorSetLayout;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipelineLayout pipelineLayout;
	public uint set;
	public VkDescriptorUpdateTemplateCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorUpdateTemplateCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorUpdateTemplateCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryProperties
{
	public VkExternalMemoryFeatureFlags externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalImageFormatInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public VkPhysicalDeviceExternalImageFormatInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalImageFormatInfo;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalImageFormatInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalImageFormatProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;
	public VkExternalImageFormatProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalImageFormatProperties;
		#else
		this = default;
		sType = VkStructureType.ExternalImageFormatProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalBufferInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBufferCreateFlags flags;
	public VkBufferUsageFlags usage;
	public VkExternalMemoryHandleTypeFlags handleType;
	public VkPhysicalDeviceExternalBufferInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalBufferInfo;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalBufferInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalBufferProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryProperties externalMemoryProperties;
	public VkExternalBufferProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalBufferProperties;
		#else
		this = default;
		sType = VkStructureType.ExternalBufferProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceIDProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte deviceUUID[16];
	public unsafe fixed byte driverUUID[16];
	public unsafe fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;
	public VkPhysicalDeviceIDProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceIDProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceIDProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryImageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;
	public VkExternalMemoryImageCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalMemoryImageCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ExternalMemoryImageCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryBufferCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;
	public VkExternalMemoryBufferCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalMemoryBufferCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ExternalMemoryBufferCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMemoryAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleTypes;
	public VkExportMemoryAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExportMemoryAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.ExportMemoryAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalFenceInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags handleType;
	public VkPhysicalDeviceExternalFenceInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalFenceInfo;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalFenceInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalFenceProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
	public VkExternalFenceFeatureFlags externalFenceFeatures;
	public VkExternalFenceProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalFenceProperties;
		#else
		this = default;
		sType = VkStructureType.ExternalFenceProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportFenceCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalFenceHandleTypeFlags handleTypes;
	public VkExportFenceCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExportFenceCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ExportFenceCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportSemaphoreCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleTypes;
	public VkExportSemaphoreCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExportSemaphoreCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ExportSemaphoreCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalSemaphoreInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public VkPhysicalDeviceExternalSemaphoreInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalSemaphoreInfo;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalSemaphoreInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalSemaphoreProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
	public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
	public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
	public VkExternalSemaphoreProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalSemaphoreProperties;
		#else
		this = default;
		sType = VkStructureType.ExternalSemaphoreProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance3Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;
	public VkPhysicalDeviceMaintenance3Properties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMaintenance3Properties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMaintenance3Properties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutSupport
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supported;
	public VkDescriptorSetLayoutSupport()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetLayoutSupport;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetLayoutSupport;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderDrawParametersFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderDrawParameters;
	public VkPhysicalDeviceShaderDrawParametersFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderDrawParametersFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderDrawParametersFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan11Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer16BitAccess;
	public VkBool32 uniformAndStorageBuffer16BitAccess;
	public VkBool32 storagePushConstant16;
	public VkBool32 storageInputOutput16;
	public VkBool32 multiview;
	public VkBool32 multiviewGeometryShader;
	public VkBool32 multiviewTessellationShader;
	public VkBool32 variablePointersStorageBuffer;
	public VkBool32 variablePointers;
	public VkBool32 protectedMemory;
	public VkBool32 samplerYcbcrConversion;
	public VkBool32 shaderDrawParameters;
	public VkPhysicalDeviceVulkan11Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan11Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan11Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan11Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte deviceUUID[16];
	public unsafe fixed byte driverUUID[16];
	public unsafe fixed byte deviceLUID[8];
	public uint deviceNodeMask;
	public VkBool32 deviceLUIDValid;
	public uint subgroupSize;
	public VkShaderStageFlags subgroupSupportedStages;
	public VkSubgroupFeatureFlags subgroupSupportedOperations;
	public VkBool32 subgroupQuadOperationsInAllStages;
	public VkPointClippingBehavior pointClippingBehavior;
	public uint maxMultiviewViewCount;
	public uint maxMultiviewInstanceIndex;
	public VkBool32 protectedNoFault;
	public uint maxPerSetDescriptors;
	public ulong maxMemoryAllocationSize;
	public VkPhysicalDeviceVulkan11Properties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan11Properties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan11Properties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan12Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 samplerMirrorClampToEdge;
	public VkBool32 drawIndirectCount;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;
	public VkBool32 descriptorIndexing;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;
	public VkBool32 samplerFilterMinmax;
	public VkBool32 scalarBlockLayout;
	public VkBool32 imagelessFramebuffer;
	public VkBool32 uniformBufferStandardLayout;
	public VkBool32 shaderSubgroupExtendedTypes;
	public VkBool32 separateDepthStencilLayouts;
	public VkBool32 hostQueryReset;
	public VkBool32 timelineSemaphore;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	public VkBool32 shaderOutputViewportIndex;
	public VkBool32 shaderOutputLayer;
	public VkBool32 subgroupBroadcastDynamicId;
	public VkPhysicalDeviceVulkan12Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan12Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan12Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkConformanceVersion
{
	public byte major;
	public byte minor;
	public byte subminor;
	public byte patch;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan12Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDriverId driverID;
	public unsafe fixed byte driverName[256];
	public unsafe fixed byte driverInfo[256];
	public VkConformanceVersion conformanceVersion;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;
	public ulong maxTimelineSemaphoreValueDifference;
	public VkSampleCountFlags framebufferIntegerColorSampleCounts;
	public VkPhysicalDeviceVulkan12Properties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan12Properties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan12Properties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageFormatListCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint viewFormatCount;
	public unsafe VkFormat* pViewFormats;
	public VkImageFormatListCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageFormatListCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ImageFormatListCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescription2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAttachmentDescriptionFlags flags;
	public VkFormat format;
	public VkSampleCountFlags samples;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkAttachmentLoadOp stencilLoadOp;
	public VkAttachmentStoreOp stencilStoreOp;
	public VkImageLayout initialLayout;
	public VkImageLayout finalLayout;
	public VkAttachmentDescription2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AttachmentDescription2;
		#else
		this = default;
		sType = VkStructureType.AttachmentDescription2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReference2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachment;
	public VkImageLayout layout;
	public VkImageAspectFlags aspectMask;
	public VkAttachmentReference2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AttachmentReference2;
		#else
		this = default;
		sType = VkStructureType.AttachmentReference2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescription2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubpassDescriptionFlags flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint viewMask;
	public uint inputAttachmentCount;
	public unsafe VkAttachmentReference2* pInputAttachments;
	public uint colorAttachmentCount;
	public unsafe VkAttachmentReference2* pColorAttachments;
	public unsafe VkAttachmentReference2* pResolveAttachments;
	public unsafe VkAttachmentReference2* pDepthStencilAttachment;
	public uint preserveAttachmentCount;
	public unsafe uint* pPreserveAttachments;
	public VkSubpassDescription2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassDescription2;
		#else
		this = default;
		sType = VkStructureType.SubpassDescription2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDependency2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint srcSubpass;
	public uint dstSubpass;
	public VkPipelineStageFlags srcStageMask;
	public VkPipelineStageFlags dstStageMask;
	public VkAccessFlags srcAccessMask;
	public VkAccessFlags dstAccessMask;
	public VkDependencyFlags dependencyFlags;
	public int viewOffset;
	public VkSubpassDependency2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassDependency2;
		#else
		this = default;
		sType = VkStructureType.SubpassDependency2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassCreateInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPassCreateFlags flags;
	public uint attachmentCount;
	public unsafe VkAttachmentDescription2* pAttachments;
	public uint subpassCount;
	public unsafe VkSubpassDescription2* pSubpasses;
	public uint dependencyCount;
	public unsafe VkSubpassDependency2* pDependencies;
	public uint correlatedViewMaskCount;
	public unsafe uint* pCorrelatedViewMasks;
	public VkRenderPassCreateInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassCreateInfo2;
		#else
		this = default;
		sType = VkStructureType.RenderPassCreateInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubpassContents contents;
	public VkSubpassBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassBeginInfo;
		#else
		this = default;
		sType = VkStructureType.SubpassBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassEndInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubpassEndInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassEndInfo;
		#else
		this = default;
		sType = VkStructureType.SubpassEndInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice8BitStorageFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 storageBuffer8BitAccess;
	public VkBool32 uniformAndStorageBuffer8BitAccess;
	public VkBool32 storagePushConstant8;
	public VkPhysicalDevice8BitStorageFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevice8BitStorageFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevice8BitStorageFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDriverProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDriverId driverID;
	public unsafe fixed byte driverName[256];
	public unsafe fixed byte driverInfo[256];
	public VkConformanceVersion conformanceVersion;
	public VkPhysicalDeviceDriverProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDriverProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDriverProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicInt64Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferInt64Atomics;
	public VkBool32 shaderSharedInt64Atomics;
	public VkPhysicalDeviceShaderAtomicInt64Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderAtomicInt64Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderAtomicInt64Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderFloat16Int8Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderFloat16;
	public VkBool32 shaderInt8;
	public VkPhysicalDeviceShaderFloat16Int8Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderFloat16Int8Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderFloat16Int8Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFloatControlsProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderFloatControlsIndependence denormBehaviorIndependence;
	public VkShaderFloatControlsIndependence roundingModeIndependence;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat16;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat32;
	public VkBool32 shaderSignedZeroInfNanPreserveFloat64;
	public VkBool32 shaderDenormPreserveFloat16;
	public VkBool32 shaderDenormPreserveFloat32;
	public VkBool32 shaderDenormPreserveFloat64;
	public VkBool32 shaderDenormFlushToZeroFloat16;
	public VkBool32 shaderDenormFlushToZeroFloat32;
	public VkBool32 shaderDenormFlushToZeroFloat64;
	public VkBool32 shaderRoundingModeRTEFloat16;
	public VkBool32 shaderRoundingModeRTEFloat32;
	public VkBool32 shaderRoundingModeRTEFloat64;
	public VkBool32 shaderRoundingModeRTZFloat16;
	public VkBool32 shaderRoundingModeRTZFloat32;
	public VkBool32 shaderRoundingModeRTZFloat64;
	public VkPhysicalDeviceFloatControlsProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFloatControlsProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFloatControlsProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint bindingCount;
	public unsafe VkDescriptorBindingFlags* pBindingFlags;
	public VkDescriptorSetLayoutBindingFlagsCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetLayoutBindingFlagsCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetLayoutBindingFlagsCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorIndexingFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderInputAttachmentArrayDynamicIndexing;
	public VkBool32 shaderUniformTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderStorageTexelBufferArrayDynamicIndexing;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexing;
	public VkBool32 shaderSampledImageArrayNonUniformIndexing;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageImageArrayNonUniformIndexing;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexing;
	public VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing;
	public VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing;
	public VkBool32 descriptorBindingUniformBufferUpdateAfterBind;
	public VkBool32 descriptorBindingSampledImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageImageUpdateAfterBind;
	public VkBool32 descriptorBindingStorageBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind;
	public VkBool32 descriptorBindingUpdateUnusedWhilePending;
	public VkBool32 descriptorBindingPartiallyBound;
	public VkBool32 descriptorBindingVariableDescriptorCount;
	public VkBool32 runtimeDescriptorArray;
	public VkPhysicalDeviceDescriptorIndexingFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDescriptorIndexingFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDescriptorIndexingFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorIndexingProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxUpdateAfterBindDescriptorsInAllPools;
	public VkBool32 shaderUniformBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderSampledImageArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageBufferArrayNonUniformIndexingNative;
	public VkBool32 shaderStorageImageArrayNonUniformIndexingNative;
	public VkBool32 shaderInputAttachmentArrayNonUniformIndexingNative;
	public VkBool32 robustBufferAccessUpdateAfterBind;
	public VkBool32 quadDivergentImplicitLod;
	public uint maxPerStageDescriptorUpdateAfterBindSamplers;
	public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
	public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
	public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
	public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
	public uint maxPerStageUpdateAfterBindResources;
	public uint maxDescriptorSetUpdateAfterBindSamplers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
	public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
	public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
	public uint maxDescriptorSetUpdateAfterBindSampledImages;
	public uint maxDescriptorSetUpdateAfterBindStorageImages;
	public uint maxDescriptorSetUpdateAfterBindInputAttachments;
	public VkPhysicalDeviceDescriptorIndexingProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDescriptorIndexingProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDescriptorIndexingProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint descriptorSetCount;
	public unsafe uint* pDescriptorCounts;
	public VkDescriptorSetVariableDescriptorCountAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetVariableDescriptorCountAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetVariableDescriptorCountAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVariableDescriptorCount;
	public VkDescriptorSetVariableDescriptorCountLayoutSupport()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetVariableDescriptorCountLayoutSupport;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetVariableDescriptorCountLayoutSupport;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassDescriptionDepthStencilResolve
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkResolveModeFlags depthResolveMode;
	public VkResolveModeFlags stencilResolveMode;
	public unsafe VkAttachmentReference2* pDepthStencilResolveAttachment;
	public VkSubpassDescriptionDepthStencilResolve()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassDescriptionDepthStencilResolve;
		#else
		this = default;
		sType = VkStructureType.SubpassDescriptionDepthStencilResolve;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthStencilResolveProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkResolveModeFlags supportedDepthResolveModes;
	public VkResolveModeFlags supportedStencilResolveModes;
	public VkBool32 independentResolveNone;
	public VkBool32 independentResolve;
	public VkPhysicalDeviceDepthStencilResolveProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDepthStencilResolveProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDepthStencilResolveProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 scalarBlockLayout;
	public VkPhysicalDeviceScalarBlockLayoutFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceScalarBlockLayoutFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceScalarBlockLayoutFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageStencilUsageCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags stencilUsage;
	public VkImageStencilUsageCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageStencilUsageCreateInfo;
		#else
		this = default;
		sType = VkStructureType.ImageStencilUsageCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerReductionModeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSamplerReductionMode reductionMode;
	public VkSamplerReductionModeCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerReductionModeCreateInfo;
		#else
		this = default;
		sType = VkStructureType.SamplerReductionModeCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 filterMinmaxSingleComponentFormats;
	public VkBool32 filterMinmaxImageComponentMapping;
	public VkPhysicalDeviceSamplerFilterMinmaxProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSamplerFilterMinmaxProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSamplerFilterMinmaxProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vulkanMemoryModel;
	public VkBool32 vulkanMemoryModelDeviceScope;
	public VkBool32 vulkanMemoryModelAvailabilityVisibilityChains;
	public VkPhysicalDeviceVulkanMemoryModelFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkanMemoryModelFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkanMemoryModelFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImagelessFramebufferFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imagelessFramebuffer;
	public VkPhysicalDeviceImagelessFramebufferFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImagelessFramebufferFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImagelessFramebufferFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferAttachmentImageInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageCreateFlags flags;
	public VkImageUsageFlags usage;
	public uint width;
	public uint height;
	public uint layerCount;
	public uint viewFormatCount;
	public unsafe VkFormat* pViewFormats;
	public VkFramebufferAttachmentImageInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FramebufferAttachmentImageInfo;
		#else
		this = default;
		sType = VkStructureType.FramebufferAttachmentImageInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferAttachmentsCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentImageInfoCount;
	public unsafe VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
	public VkFramebufferAttachmentsCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FramebufferAttachmentsCreateInfo;
		#else
		this = default;
		sType = VkStructureType.FramebufferAttachmentsCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassAttachmentBeginInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentCount;
	public unsafe VkImageView* pAttachments;
	public VkRenderPassAttachmentBeginInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassAttachmentBeginInfo;
		#else
		this = default;
		sType = VkStructureType.RenderPassAttachmentBeginInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 uniformBufferStandardLayout;
	public VkPhysicalDeviceUniformBufferStandardLayoutFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceUniformBufferStandardLayoutFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceUniformBufferStandardLayoutFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupExtendedTypes;
	public VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderSubgroupExtendedTypesFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 separateDepthStencilLayouts;
	public VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSeparateDepthStencilLayoutsFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentReferenceStencilLayout
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageLayout stencilLayout;
	public VkAttachmentReferenceStencilLayout()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AttachmentReferenceStencilLayout;
		#else
		this = default;
		sType = VkStructureType.AttachmentReferenceStencilLayout;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentDescriptionStencilLayout
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageLayout stencilInitialLayout;
	public VkImageLayout stencilFinalLayout;
	public VkAttachmentDescriptionStencilLayout()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AttachmentDescriptionStencilLayout;
		#else
		this = default;
		sType = VkStructureType.AttachmentDescriptionStencilLayout;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceHostQueryResetFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 hostQueryReset;
	public VkPhysicalDeviceHostQueryResetFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceHostQueryResetFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceHostQueryResetFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 timelineSemaphore;
	public VkPhysicalDeviceTimelineSemaphoreFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTimelineSemaphoreFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTimelineSemaphoreFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTimelineSemaphoreProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxTimelineSemaphoreValueDifference;
	public VkPhysicalDeviceTimelineSemaphoreProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTimelineSemaphoreProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTimelineSemaphoreProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreTypeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreType semaphoreType;
	public ulong initialValue;
	public VkSemaphoreTypeCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreTypeCreateInfo;
		#else
		this = default;
		sType = VkStructureType.SemaphoreTypeCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTimelineSemaphoreSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreValueCount;
	public unsafe ulong* pWaitSemaphoreValues;
	public uint signalSemaphoreValueCount;
	public unsafe ulong* pSignalSemaphoreValues;
	public VkTimelineSemaphoreSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.TimelineSemaphoreSubmitInfo;
		#else
		this = default;
		sType = VkStructureType.TimelineSemaphoreSubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreWaitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphoreWaitFlags flags;
	public uint semaphoreCount;
	public unsafe VkSemaphore* pSemaphores;
	public unsafe ulong* pValues;
	public VkSemaphoreWaitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreWaitInfo;
		#else
		this = default;
		sType = VkStructureType.SemaphoreWaitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreSignalInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public ulong value;
	public VkSemaphoreSignalInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreSignalInfo;
		#else
		this = default;
		sType = VkStructureType.SemaphoreSignalInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;
	public VkPhysicalDeviceBufferDeviceAddressFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferDeviceAddressInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public VkBufferDeviceAddressInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferDeviceAddressInfo;
		#else
		this = default;
		sType = VkStructureType.BufferDeviceAddressInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferOpaqueCaptureAddressCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong opaqueCaptureAddress;
	public VkBufferOpaqueCaptureAddressCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferOpaqueCaptureAddressCreateInfo;
		#else
		this = default;
		sType = VkStructureType.BufferOpaqueCaptureAddressCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong opaqueCaptureAddress;
	public VkMemoryOpaqueCaptureAddressAllocateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryOpaqueCaptureAddressAllocateInfo;
		#else
		this = default;
		sType = VkStructureType.MemoryOpaqueCaptureAddressAllocateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkDeviceMemoryOpaqueCaptureAddressInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceMemoryOpaqueCaptureAddressInfo;
		#else
		this = default;
		sType = VkStructureType.DeviceMemoryOpaqueCaptureAddressInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan13Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustImageAccess;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	public VkBool32 pipelineCreationCacheControl;
	public VkBool32 privateData;
	public VkBool32 shaderDemoteToHelperInvocation;
	public VkBool32 shaderTerminateInvocation;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;
	public VkBool32 synchronization2;
	public VkBool32 textureCompressionASTC_HDR;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;
	public VkBool32 dynamicRendering;
	public VkBool32 shaderIntegerDotProduct;
	public VkBool32 maintenance4;
	public VkPhysicalDeviceVulkan13Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan13Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan13Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVulkan13Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	public uint maxInlineUniformTotalSize;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	public ulong maxBufferSize;
	public VkPhysicalDeviceVulkan13Properties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVulkan13Properties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVulkan13Properties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCreationFeedback
{
	public VkPipelineCreationFeedbackFlags flags;
	public ulong duration;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCreationFeedbackCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkPipelineCreationFeedback* pPipelineCreationFeedback;
	public uint pipelineStageCreationFeedbackCount;
	public unsafe VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
	public VkPipelineCreationFeedbackCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCreationFeedbackCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineCreationFeedbackCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderTerminateInvocation;
	public VkPhysicalDeviceShaderTerminateInvocationFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderTerminateInvocationFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderTerminateInvocationFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceToolProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte name[256];
	public unsafe fixed byte version[256];
	public VkToolPurposeFlags purposes;
	public unsafe fixed byte description[256];
	public unsafe fixed byte layer[256];
	public VkPhysicalDeviceToolProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceToolProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceToolProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderDemoteToHelperInvocation;
	public VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderDemoteToHelperInvocationFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderDemoteToHelperInvocationFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrivateDataFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 privateData;
	public VkPhysicalDevicePrivateDataFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePrivateDataFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePrivateDataFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDevicePrivateDataCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint privateDataSlotRequestCount;
	public VkDevicePrivateDataCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DevicePrivateDataCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DevicePrivateDataCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPrivateDataSlotCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPrivateDataSlotCreateFlags flags;
	public VkPrivateDataSlotCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PrivateDataSlotCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PrivateDataSlotCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineCreationCacheControl;
	public VkPhysicalDevicePipelineCreationCacheControlFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePipelineCreationCacheControlFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePipelineCreationCacheControlFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public VkMemoryBarrier2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryBarrier2;
		#else
		this = default;
		sType = VkStructureType.MemoryBarrier2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkBufferMemoryBarrier2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferMemoryBarrier2;
		#else
		this = default;
		sType = VkStructureType.BufferMemoryBarrier2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageMemoryBarrier2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 srcStageMask;
	public VkAccessFlags2 srcAccessMask;
	public VkPipelineStageFlags2 dstStageMask;
	public VkAccessFlags2 dstAccessMask;
	public VkImageLayout oldLayout;
	public VkImageLayout newLayout;
	public uint srcQueueFamilyIndex;
	public uint dstQueueFamilyIndex;
	public VkImage image;
	public VkImageSubresourceRange subresourceRange;
	public VkImageMemoryBarrier2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageMemoryBarrier2;
		#else
		this = default;
		sType = VkStructureType.ImageMemoryBarrier2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDependencyInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDependencyFlags dependencyFlags;
	public uint memoryBarrierCount;
	public unsafe VkMemoryBarrier2* pMemoryBarriers;
	public uint bufferMemoryBarrierCount;
	public unsafe VkBufferMemoryBarrier2* pBufferMemoryBarriers;
	public uint imageMemoryBarrierCount;
	public unsafe VkImageMemoryBarrier2* pImageMemoryBarriers;
	public VkDependencyInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DependencyInfo;
		#else
		this = default;
		sType = VkStructureType.DependencyInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public ulong value;
	public VkPipelineStageFlags2 stageMask;
	public uint deviceIndex;
	public VkSemaphoreSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreSubmitInfo;
		#else
		this = default;
		sType = VkStructureType.SemaphoreSubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferSubmitInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCommandBuffer commandBuffer;
	public uint deviceMask;
	public VkCommandBufferSubmitInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferSubmitInfo;
		#else
		this = default;
		sType = VkStructureType.CommandBufferSubmitInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubmitInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSubmitFlags flags;
	public uint waitSemaphoreInfoCount;
	public unsafe VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
	public uint commandBufferInfoCount;
	public unsafe VkCommandBufferSubmitInfo* pCommandBufferInfos;
	public uint signalSemaphoreInfoCount;
	public unsafe VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
	public VkSubmitInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubmitInfo2;
		#else
		this = default;
		sType = VkStructureType.SubmitInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSynchronization2Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 synchronization2;
	public VkPhysicalDeviceSynchronization2Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSynchronization2Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSynchronization2Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderZeroInitializeWorkgroupMemory;
	public VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageRobustnessFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustImageAccess;
	public VkPhysicalDeviceImageRobustnessFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImageRobustnessFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImageRobustnessFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong srcOffset;
	public ulong dstOffset;
	public ulong size;
	public VkBufferCopy2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferCopy2;
		#else
		this = default;
		sType = VkStructureType.BufferCopy2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyBufferInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer srcBuffer;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public unsafe VkBufferCopy2* pRegions;
	public VkCopyBufferInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyBufferInfo2;
		#else
		this = default;
		sType = VkStructureType.CopyBufferInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
	public VkImageCopy2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageCopy2;
		#else
		this = default;
		sType = VkStructureType.ImageCopy2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageCopy2* pRegions;
	public VkCopyImageInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyImageInfo2;
		#else
		this = default;
		sType = VkStructureType.CopyImageInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferImageCopy2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong bufferOffset;
	public uint bufferRowLength;
	public uint bufferImageHeight;
	public VkImageSubresourceLayers imageSubresource;
	public VkOffset3D imageOffset;
	public VkExtent3D imageExtent;
	public VkBufferImageCopy2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferImageCopy2;
		#else
		this = default;
		sType = VkStructureType.BufferImageCopy2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyBufferToImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer srcBuffer;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkBufferImageCopy2* pRegions;
	public VkCopyBufferToImageInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyBufferToImageInfo2;
		#else
		this = default;
		sType = VkStructureType.CopyBufferToImageInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyImageToBufferInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkBuffer dstBuffer;
	public uint regionCount;
	public unsafe VkBufferImageCopy2* pRegions;
	public VkCopyImageToBufferInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyImageToBufferInfo2;
		#else
		this = default;
		sType = VkStructureType.CopyImageToBufferInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageBlit2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffsets_0;
	public VkOffset3D srcOffsets_1;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffsets_0;
	public VkOffset3D dstOffsets_1;
	public VkImageBlit2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageBlit2;
		#else
		this = default;
		sType = VkStructureType.ImageBlit2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBlitImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageBlit2* pRegions;
	public VkFilter filter;
	public VkBlitImageInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BlitImageInfo2;
		#else
		this = default;
		sType = VkStructureType.BlitImageInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageResolve2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageSubresourceLayers srcSubresource;
	public VkOffset3D srcOffset;
	public VkImageSubresourceLayers dstSubresource;
	public VkOffset3D dstOffset;
	public VkExtent3D extent;
	public VkImageResolve2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageResolve2;
		#else
		this = default;
		sType = VkStructureType.ImageResolve2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkResolveImageInfo2
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage srcImage;
	public VkImageLayout srcImageLayout;
	public VkImage dstImage;
	public VkImageLayout dstImageLayout;
	public uint regionCount;
	public unsafe VkImageResolve2* pRegions;
	public VkResolveImageInfo2()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ResolveImageInfo2;
		#else
		this = default;
		sType = VkStructureType.ResolveImageInfo2;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subgroupSizeControl;
	public VkBool32 computeFullSubgroups;
	public VkPhysicalDeviceSubgroupSizeControlFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSubgroupSizeControlFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSubgroupSizeControlFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubgroupSizeControlProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minSubgroupSize;
	public uint maxSubgroupSize;
	public uint maxComputeWorkgroupSubgroups;
	public VkShaderStageFlags requiredSubgroupSizeStages;
	public VkPhysicalDeviceSubgroupSizeControlProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSubgroupSizeControlProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSubgroupSizeControlProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint requiredSubgroupSize;
	public VkPipelineShaderStageRequiredSubgroupSizeCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineShaderStageRequiredSubgroupSizeCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineShaderStageRequiredSubgroupSizeCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInlineUniformBlockFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 inlineUniformBlock;
	public VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind;
	public VkPhysicalDeviceInlineUniformBlockFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceInlineUniformBlockFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceInlineUniformBlockFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInlineUniformBlockProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInlineUniformBlockSize;
	public uint maxPerStageDescriptorInlineUniformBlocks;
	public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
	public uint maxDescriptorSetInlineUniformBlocks;
	public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
	public VkPhysicalDeviceInlineUniformBlockProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceInlineUniformBlockProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceInlineUniformBlockProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetInlineUniformBlock
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint dataSize;
	public unsafe void* pData;
	public VkWriteDescriptorSetInlineUniformBlock()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.WriteDescriptorSetInlineUniformBlock;
		#else
		this = default;
		sType = VkStructureType.WriteDescriptorSetInlineUniformBlock;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInlineUniformBlockBindings;
	public VkDescriptorPoolInlineUniformBlockCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorPoolInlineUniformBlockCreateInfo;
		#else
		this = default;
		sType = VkStructureType.DescriptorPoolInlineUniformBlockCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 textureCompressionASTC_HDR;
	public VkPhysicalDeviceTextureCompressionASTCHDRFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTextureCompressionASTCHDRFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTextureCompressionASTCHDRFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingAttachmentInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkResolveModeFlags resolveMode;
	public VkImageView resolveImageView;
	public VkImageLayout resolveImageLayout;
	public VkAttachmentLoadOp loadOp;
	public VkAttachmentStoreOp storeOp;
	public VkClearValue clearValue;
	public VkRenderingAttachmentInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderingAttachmentInfo;
		#else
		this = default;
		sType = VkStructureType.RenderingAttachmentInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderingFlags flags;
	public VkRect2D renderArea;
	public uint layerCount;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkRenderingAttachmentInfo* pColorAttachments;
	public unsafe VkRenderingAttachmentInfo* pDepthAttachment;
	public unsafe VkRenderingAttachmentInfo* pStencilAttachment;
	public VkRenderingInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderingInfo;
		#else
		this = default;
		sType = VkStructureType.RenderingInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRenderingCreateInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;
	public VkPipelineRenderingCreateInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRenderingCreateInfo;
		#else
		this = default;
		sType = VkStructureType.PipelineRenderingCreateInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDynamicRenderingFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dynamicRendering;
	public VkPhysicalDeviceDynamicRenderingFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDynamicRenderingFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDynamicRenderingFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceRenderingInfo
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderingFlags flags;
	public uint viewMask;
	public uint colorAttachmentCount;
	public unsafe VkFormat* pColorAttachmentFormats;
	public VkFormat depthAttachmentFormat;
	public VkFormat stencilAttachmentFormat;
	public VkSampleCountFlags rasterizationSamples;
	public VkCommandBufferInheritanceRenderingInfo()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferInheritanceRenderingInfo;
		#else
		this = default;
		sType = VkStructureType.CommandBufferInheritanceRenderingInfo;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderIntegerDotProduct;
	public VkPhysicalDeviceShaderIntegerDotProductFeatures()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductFeatures;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductFeatures;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 integerDotProduct8BitUnsignedAccelerated;
	public VkBool32 integerDotProduct8BitSignedAccelerated;
	public VkBool32 integerDotProduct8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProduct4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProduct16BitUnsignedAccelerated;
	public VkBool32 integerDotProduct16BitSignedAccelerated;
	public VkBool32 integerDotProduct16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct32BitUnsignedAccelerated;
	public VkBool32 integerDotProduct32BitSignedAccelerated;
	public VkBool32 integerDotProduct32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProduct64BitUnsignedAccelerated;
	public VkBool32 integerDotProduct64BitSignedAccelerated;
	public VkBool32 integerDotProduct64BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitSignedAccelerated;
	public VkBool32 integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
	public VkPhysicalDeviceShaderIntegerDotProductProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderIntegerDotProductProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong storageTexelBufferOffsetAlignmentBytes;
	public VkBool32 storageTexelBufferOffsetSingleTexelAlignment;
	public ulong uniformTexelBufferOffsetAlignmentBytes;
	public VkBool32 uniformTexelBufferOffsetSingleTexelAlignment;
	public VkPhysicalDeviceTexelBufferAlignmentProperties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentProperties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentProperties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFormatProperties3
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormatFeatureFlags2 linearTilingFeatures;
	public VkFormatFeatureFlags2 optimalTilingFeatures;
	public VkFormatFeatureFlags2 bufferFeatures;
	public VkFormatProperties3()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FormatProperties3;
		#else
		this = default;
		sType = VkStructureType.FormatProperties3;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance4Features
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 maintenance4;
	public VkPhysicalDeviceMaintenance4Features()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMaintenance4Features;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMaintenance4Features;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMaintenance4Properties
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxBufferSize;
	public VkPhysicalDeviceMaintenance4Properties()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMaintenance4Properties;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMaintenance4Properties;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceBufferMemoryRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkBufferCreateInfo* pCreateInfo;
	public VkDeviceBufferMemoryRequirements()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceBufferMemoryRequirements;
		#else
		this = default;
		sType = VkStructureType.DeviceBufferMemoryRequirements;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceImageMemoryRequirements
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkImageCreateInfo* pCreateInfo;
	public VkImageAspectFlags planeAspect;
	public VkDeviceImageMemoryRequirements()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceImageMemoryRequirements;
		#else
		this = default;
		sType = VkStructureType.DeviceImageMemoryRequirements;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilitiesKHR
{
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceFormatKHR
{
	public VkFormat format;
	public VkColorSpaceKHR colorSpace;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainCreateFlagsKHR flags;
	public VkSurfaceKHR surface;
	public uint minImageCount;
	public VkFormat imageFormat;
	public VkColorSpaceKHR imageColorSpace;
	public VkExtent2D imageExtent;
	public uint imageArrayLayers;
	public VkImageUsageFlags imageUsage;
	public VkSharingMode imageSharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkSurfaceTransformFlagsKHR preTransform;
	public VkCompositeAlphaFlagsKHR compositeAlpha;
	public VkPresentModeKHR presentMode;
	public VkBool32 clipped;
	public VkSwapchainKHR oldSwapchain;
	public VkSwapchainCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SwapchainCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.SwapchainCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint waitSemaphoreCount;
	public unsafe VkSemaphore* pWaitSemaphores;
	public uint swapchainCount;
	public unsafe VkSwapchainKHR* pSwapchains;
	public unsafe uint* pImageIndices;
	public unsafe VkResult* pResults;
	public VkPresentInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PresentInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PresentInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public VkImageSwapchainCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageSwapchainCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.ImageSwapchainCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindImageMemorySwapchainInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public uint imageIndex;
	public VkBindImageMemorySwapchainInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindImageMemorySwapchainInfoKHR;
		#else
		this = default;
		sType = VkStructureType.BindImageMemorySwapchainInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAcquireNextImageInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSwapchainKHR swapchain;
	public ulong timeout;
	public VkSemaphore semaphore;
	public VkFence fence;
	public uint deviceMask;
	public VkAcquireNextImageInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AcquireNextImageInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AcquireNextImageInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupPresentCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed uint presentMask[32];
	public VkDeviceGroupPresentModeFlagsKHR modes;
	public VkDeviceGroupPresentCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupPresentCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupPresentCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe uint* pDeviceMasks;
	public VkDeviceGroupPresentModeFlagsKHR mode;
	public VkDeviceGroupPresentInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupPresentInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupPresentInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceGroupSwapchainCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceGroupPresentModeFlagsKHR modes;
	public VkDeviceGroupSwapchainCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceGroupSwapchainCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DeviceGroupSwapchainCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeParametersKHR
{
	public VkExtent2D visibleRegion;
	public uint refreshRate;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModeCreateFlagsKHR flags;
	public VkDisplayModeParametersKHR parameters;
	public VkDisplayModeCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayModeCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DisplayModeCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModePropertiesKHR
{
	public VkDisplayModeKHR displayMode;
	public VkDisplayModeParametersKHR parameters;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneCapabilitiesKHR
{
	public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
	public VkOffset2D minSrcPosition;
	public VkOffset2D maxSrcPosition;
	public VkExtent2D minSrcExtent;
	public VkExtent2D maxSrcExtent;
	public VkOffset2D minDstPosition;
	public VkOffset2D maxDstPosition;
	public VkExtent2D minDstExtent;
	public VkExtent2D maxDstExtent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlanePropertiesKHR
{
	public VkDisplayKHR currentDisplay;
	public uint currentStackIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPropertiesKHR
{
	public VkDisplayKHR display;
	public unsafe byte* displayName;
	public VkExtent2D physicalDimensions;
	public VkExtent2D physicalResolution;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkBool32 planeReorderPossible;
	public VkBool32 persistentContent;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplaySurfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplaySurfaceCreateFlagsKHR flags;
	public VkDisplayModeKHR displayMode;
	public uint planeIndex;
	public uint planeStackIndex;
	public VkSurfaceTransformFlagsKHR transform;
	public float globalAlpha;
	public VkDisplayPlaneAlphaFlagsKHR alphaMode;
	public VkExtent2D imageExtent;
	public VkDisplaySurfaceCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplaySurfaceCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DisplaySurfaceCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPresentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRect2D srcRect;
	public VkRect2D dstRect;
	public VkBool32 persistent;
	public VkDisplayPresentInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayPresentInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DisplayPresentInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkExtent2D shadingRateAttachmentTexelSize;
	public VkRenderingFragmentShadingRateAttachmentInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderingFragmentShadingRateAttachmentInfoKHR;
		#else
		this = default;
		sType = VkStructureType.RenderingFragmentShadingRateAttachmentInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkImageLayout imageLayout;
	public VkRenderingFragmentDensityMapAttachmentInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderingFragmentDensityMapAttachmentInfoEXT;
		#else
		this = default;
		sType = VkStructureType.RenderingFragmentDensityMapAttachmentInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentSampleCountInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint colorAttachmentCount;
	public unsafe VkSampleCountFlags* pColorAttachmentSamples;
	public VkSampleCountFlags depthStencilAttachmentSamples;
	public VkAttachmentSampleCountInfoAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AttachmentSampleCountInfoAMD;
		#else
		this = default;
		sType = VkStructureType.AttachmentSampleCountInfoAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiviewPerViewAttributesInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 perViewAttributes;
	public VkBool32 perViewAttributesPositionXOnly;
	public VkMultiviewPerViewAttributesInfoNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MultiviewPerViewAttributesInfoNVX;
		#else
		this = default;
		sType = VkStructureType.MultiviewPerViewAttributesInfoNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMemoryFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public int fd;
	public VkImportMemoryFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImportMemoryFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.ImportMemoryFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryFdPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryTypeBits;
	public VkMemoryFdPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryFdPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.MemoryFdPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;
	public VkMemoryGetFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryGetFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.MemoryGetFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportSemaphoreFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public VkSemaphoreImportFlags flags;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public int fd;
	public VkImportSemaphoreFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImportSemaphoreFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.ImportSemaphoreFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSemaphoreGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSemaphore semaphore;
	public VkExternalSemaphoreHandleTypeFlags handleType;
	public VkSemaphoreGetFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SemaphoreGetFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.SemaphoreGetFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPushDescriptors;
	public VkPhysicalDevicePushDescriptorPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePushDescriptorPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePushDescriptorPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRectLayerKHR
{
	public VkOffset2D offset;
	public VkExtent2D extent;
	public uint layer;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentRegionKHR
{
	public uint rectangleCount;
	public unsafe VkRectLayerKHR* pRectangles;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentRegionsKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkPresentRegionKHR* pRegions;
	public VkPresentRegionsKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PresentRegionsKHR;
		#else
		this = default;
		sType = VkStructureType.PresentRegionsKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSharedPresentSurfaceCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags sharedPresentSupportedUsageFlags;
	public VkSharedPresentSurfaceCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SharedPresentSurfaceCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.SharedPresentSurfaceCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportFenceFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFence fence;
	public VkFenceImportFlags flags;
	public VkExternalFenceHandleTypeFlags handleType;
	public int fd;
	public VkImportFenceFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImportFenceFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.ImportFenceFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFenceGetFdInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFence fence;
	public VkExternalFenceHandleTypeFlags handleType;
	public VkFenceGetFdInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FenceGetFdInfoKHR;
		#else
		this = default;
		sType = VkStructureType.FenceGetFdInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 performanceCounterQueryPools;
	public VkBool32 performanceCounterMultipleQueryPools;
	public VkPhysicalDevicePerformanceQueryFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePerformanceQueryFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePerformanceQueryFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 allowCommandBufferQueryCopies;
	public VkPhysicalDevicePerformanceQueryPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePerformanceQueryPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePerformanceQueryPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceCounterKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceCounterUnitKHR unit;
	public VkPerformanceCounterScopeKHR scope;
	public VkPerformanceCounterStorageKHR storage;
	public unsafe fixed byte uuid[16];
	public VkPerformanceCounterKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceCounterKHR;
		#else
		this = default;
		sType = VkStructureType.PerformanceCounterKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceCounterDescriptionKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceCounterDescriptionFlagsKHR flags;
	public unsafe fixed byte name[256];
	public unsafe fixed byte category[256];
	public unsafe fixed byte description[256];
	public VkPerformanceCounterDescriptionKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceCounterDescriptionKHR;
		#else
		this = default;
		sType = VkStructureType.PerformanceCounterDescriptionKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolPerformanceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint queueFamilyIndex;
	public uint counterIndexCount;
	public unsafe uint* pCounterIndices;
	public VkQueryPoolPerformanceCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueryPoolPerformanceCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.QueryPoolPerformanceCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPerformanceCounterResultKHR
{
	[FieldOffset(0)]
	public int int32;
	[FieldOffset(0)]
	public long int64;
	[FieldOffset(0)]
	public uint uint32;
	[FieldOffset(0)]
	public ulong uint64;
	[FieldOffset(0)]
	public float float32;
	[FieldOffset(0)]
	public double float64;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAcquireProfilingLockInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAcquireProfilingLockFlagsKHR flags;
	public ulong timeout;
	public VkAcquireProfilingLockInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AcquireProfilingLockInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AcquireProfilingLockInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceQuerySubmitInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint counterPassIndex;
	public VkPerformanceQuerySubmitInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceQuerySubmitInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PerformanceQuerySubmitInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSurfaceInfo2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceKHR surface;
	public VkPhysicalDeviceSurfaceInfo2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSurfaceInfo2KHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSurfaceInfo2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilities2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceCapabilitiesKHR surfaceCapabilities;
	public VkSurfaceCapabilities2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SurfaceCapabilities2KHR;
		#else
		this = default;
		sType = VkStructureType.SurfaceCapabilities2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceFormat2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceFormatKHR surfaceFormat;
	public VkSurfaceFormat2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SurfaceFormat2KHR;
		#else
		this = default;
		sType = VkStructureType.SurfaceFormat2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPropertiesKHR displayProperties;
	public VkDisplayProperties2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayProperties2KHR;
		#else
		this = default;
		sType = VkStructureType.DisplayProperties2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPlanePropertiesKHR displayPlaneProperties;
	public VkDisplayPlaneProperties2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayPlaneProperties2KHR;
		#else
		this = default;
		sType = VkStructureType.DisplayPlaneProperties2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayModeProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModePropertiesKHR displayModeProperties;
	public VkDisplayModeProperties2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayModeProperties2KHR;
		#else
		this = default;
		sType = VkStructureType.DisplayModeProperties2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneInfo2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayModeKHR mode;
	public uint planeIndex;
	public VkDisplayPlaneInfo2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayPlaneInfo2KHR;
		#else
		this = default;
		sType = VkStructureType.DisplayPlaneInfo2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPlaneCapabilities2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPlaneCapabilitiesKHR capabilities;
	public VkDisplayPlaneCapabilities2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayPlaneCapabilities2KHR;
		#else
		this = default;
		sType = VkStructureType.DisplayPlaneCapabilities2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderClockFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupClock;
	public VkBool32 shaderDeviceClock;
	public VkPhysicalDeviceShaderClockFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderClockFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderClockFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueueGlobalPriorityKHR globalPriority;
	public VkDeviceQueueGlobalPriorityCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceQueueGlobalPriorityCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.DeviceQueueGlobalPriorityCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 globalPriorityQuery;
	public VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceGlobalPriorityQueryFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceGlobalPriorityQueryFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint priorityCount;
	public VkQueueGlobalPriorityKHR priorities_0;
	public VkQueueGlobalPriorityKHR priorities_1;
	public VkQueueGlobalPriorityKHR priorities_2;
	public VkQueueGlobalPriorityKHR priorities_3;
	public VkQueueGlobalPriorityKHR priorities_4;
	public VkQueueGlobalPriorityKHR priorities_5;
	public VkQueueGlobalPriorityKHR priorities_6;
	public VkQueueGlobalPriorityKHR priorities_7;
	public VkQueueGlobalPriorityKHR priorities_8;
	public VkQueueGlobalPriorityKHR priorities_9;
	public VkQueueGlobalPriorityKHR priorities_10;
	public VkQueueGlobalPriorityKHR priorities_11;
	public VkQueueGlobalPriorityKHR priorities_12;
	public VkQueueGlobalPriorityKHR priorities_13;
	public VkQueueGlobalPriorityKHR priorities_14;
	public VkQueueGlobalPriorityKHR priorities_15;
	public VkQueueFamilyGlobalPriorityPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueueFamilyGlobalPriorityPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.QueueFamilyGlobalPriorityPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFragmentShadingRateAttachmentInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkAttachmentReference2* pFragmentShadingRateAttachment;
	public VkExtent2D shadingRateAttachmentTexelSize;
	public VkFragmentShadingRateAttachmentInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FragmentShadingRateAttachmentInfoKHR;
		#else
		this = default;
		sType = VkStructureType.FragmentShadingRateAttachmentInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D fragmentSize;
	public VkFragmentShadingRateCombinerOpKHR combinerOps_0;
	public VkFragmentShadingRateCombinerOpKHR combinerOps_1;
	public VkPipelineFragmentShadingRateStateCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineFragmentShadingRateStateCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineFragmentShadingRateStateCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineFragmentShadingRate;
	public VkBool32 primitiveFragmentShadingRate;
	public VkBool32 attachmentFragmentShadingRate;
	public VkPhysicalDeviceFragmentShadingRateFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
	public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
	public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
	public VkBool32 primitiveFragmentShadingRateWithMultipleViewports;
	public VkBool32 layeredShadingRateAttachments;
	public VkBool32 fragmentShadingRateNonTrivialCombinerOps;
	public VkExtent2D maxFragmentSize;
	public uint maxFragmentSizeAspectRatio;
	public uint maxFragmentShadingRateCoverageSamples;
	public VkSampleCountFlags maxFragmentShadingRateRasterizationSamples;
	public VkBool32 fragmentShadingRateWithShaderDepthStencilWrites;
	public VkBool32 fragmentShadingRateWithSampleMask;
	public VkBool32 fragmentShadingRateWithShaderSampleMask;
	public VkBool32 fragmentShadingRateWithConservativeRasterization;
	public VkBool32 fragmentShadingRateWithFragmentShaderInterlock;
	public VkBool32 fragmentShadingRateWithCustomSampleLocations;
	public VkBool32 fragmentShadingRateStrictMultiplyCombiner;
	public VkPhysicalDeviceFragmentShadingRatePropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShadingRatePropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShadingRatePropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleCounts;
	public VkExtent2D fragmentSize;
	public VkPhysicalDeviceFragmentShadingRateKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceProtectedCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supportsProtected;
	public VkSurfaceProtectedCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SurfaceProtectedCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.SurfaceProtectedCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePresentWaitFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentWait;
	public VkPhysicalDevicePresentWaitFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePresentWaitFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePresentWaitFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pipelineExecutableInfo;
	public VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipeline pipeline;
	public VkPipelineInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutablePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderStageFlags stages;
	public unsafe fixed byte name[256];
	public unsafe fixed byte description[256];
	public uint subgroupSize;
	public VkPipelineExecutablePropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineExecutablePropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineExecutablePropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipeline pipeline;
	public uint executableIndex;
	public VkPipelineExecutableInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineExecutableInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineExecutableInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPipelineExecutableStatisticValueKHR
{
	[FieldOffset(0)]
	public VkBool32 b32;
	[FieldOffset(0)]
	public long i64;
	[FieldOffset(0)]
	public ulong u64;
	[FieldOffset(0)]
	public double f64;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableStatisticKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte name[256];
	public unsafe fixed byte description[256];
	public VkPipelineExecutableStatisticFormatKHR format;
	public VkPipelineExecutableStatisticValueKHR value;
	public VkPipelineExecutableStatisticKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineExecutableStatisticKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineExecutableStatisticKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineExecutableInternalRepresentationKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe fixed byte name[256];
	public unsafe fixed byte description[256];
	public VkBool32 isText;
	public nuint dataSize;
	public unsafe void* pData;
	public VkPipelineExecutableInternalRepresentationKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineExecutableInternalRepresentationKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineExecutableInternalRepresentationKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineLibraryCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint libraryCount;
	public unsafe VkPipeline* pLibraries;
	public VkPipelineLibraryCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineLibraryCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PipelineLibraryCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentIdKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe ulong* pPresentIds;
	public VkPresentIdKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PresentIdKHR;
		#else
		this = default;
		sType = VkStructureType.PresentIdKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePresentIdFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 presentId;
	public VkPhysicalDevicePresentIdFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePresentIdFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePresentIdFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyCheckpointProperties2NV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 checkpointExecutionStageMask;
	public VkQueueFamilyCheckpointProperties2NV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueueFamilyCheckpointProperties2NV;
		#else
		this = default;
		sType = VkStructureType.QueueFamilyCheckpointProperties2NV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCheckpointData2NV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags2 stage;
	public unsafe void* pCheckpointMarker;
	public VkCheckpointData2NV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CheckpointData2NV;
		#else
		this = default;
		sType = VkStructureType.CheckpointData2NV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSubgroupUniformControlFlow;
	public VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 workgroupMemoryExplicitLayout;
	public VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout;
	public VkBool32 workgroupMemoryExplicitLayout8BitAccess;
	public VkBool32 workgroupMemoryExplicitLayout16BitAccess;
	public VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugReportCallbackCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportFlagsEXT flags;
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, uint> pfnCallback;
	#else
	public IntPtr pfnCallback;
	#endif
	public unsafe void* pUserData;
	public VkDebugReportCallbackCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugReportCallbackCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugReportCallbackCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateRasterizationOrderAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRasterizationOrderAMD rasterizationOrder;
	public VkPipelineRasterizationStateRasterizationOrderAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationStateRasterizationOrderAMD;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationStateRasterizationOrderAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerObjectNameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public unsafe byte* pObjectName;
	public VkDebugMarkerObjectNameInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugMarkerObjectNameInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugMarkerObjectNameInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerObjectTagInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugReportObjectTypeEXT objectType;
	public ulong @object;
	public ulong tagName;
	public nuint tagSize;
	public unsafe void* pTag;
	public VkDebugMarkerObjectTagInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugMarkerObjectTagInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugMarkerObjectTagInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugMarkerMarkerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pMarkerName;
	public unsafe fixed float color[4];
	public VkDebugMarkerMarkerInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugMarkerMarkerInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugMarkerMarkerInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationImageCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocation;
	public VkDedicatedAllocationImageCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DedicatedAllocationImageCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.DedicatedAllocationImageCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationBufferCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocation;
	public VkDedicatedAllocationBufferCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DedicatedAllocationBufferCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.DedicatedAllocationBufferCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDedicatedAllocationMemoryAllocateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImage image;
	public VkBuffer buffer;
	public VkDedicatedAllocationMemoryAllocateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DedicatedAllocationMemoryAllocateInfoNV;
		#else
		this = default;
		sType = VkStructureType.DedicatedAllocationMemoryAllocateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 transformFeedback;
	public VkBool32 geometryStreams;
	public VkPhysicalDeviceTransformFeedbackFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTransformFeedbackFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTransformFeedbackFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxTransformFeedbackStreams;
	public uint maxTransformFeedbackBuffers;
	public ulong maxTransformFeedbackBufferSize;
	public uint maxTransformFeedbackStreamDataSize;
	public uint maxTransformFeedbackBufferDataSize;
	public uint maxTransformFeedbackBufferDataStride;
	public VkBool32 transformFeedbackQueries;
	public VkBool32 transformFeedbackStreamsLinesTriangles;
	public VkBool32 transformFeedbackRasterizationStreamSelect;
	public VkBool32 transformFeedbackDraw;
	public VkPhysicalDeviceTransformFeedbackPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTransformFeedbackPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTransformFeedbackPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
	public uint rasterizationStream;
	public VkPipelineRasterizationStateStreamCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationStateStreamCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationStateStreamCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuModuleCreateInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public nuint dataSize;
	public unsafe void* pData;
	public VkCuModuleCreateInfoNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CuModuleCreateInfoNVX;
		#else
		this = default;
		sType = VkStructureType.CuModuleCreateInfoNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuFunctionCreateInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCuModuleNVX module;
	public unsafe byte* pName;
	public VkCuFunctionCreateInfoNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CuFunctionCreateInfoNVX;
		#else
		this = default;
		sType = VkStructureType.CuFunctionCreateInfoNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCuLaunchInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCuFunctionNVX function;
	public uint gridDimX;
	public uint gridDimY;
	public uint gridDimZ;
	public uint blockDimX;
	public uint blockDimY;
	public uint blockDimZ;
	public uint sharedMemBytes;
	public nuint paramCount;
	public unsafe void** pParams;
	public nuint extraCount;
	public unsafe void** pExtras;
	public VkCuLaunchInfoNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CuLaunchInfoNVX;
		#else
		this = default;
		sType = VkStructureType.CuLaunchInfoNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewHandleInfoNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageView imageView;
	public VkDescriptorType descriptorType;
	public VkSampler sampler;
	public VkImageViewHandleInfoNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewHandleInfoNVX;
		#else
		this = default;
		sType = VkStructureType.ImageViewHandleInfoNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewAddressPropertiesNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public IntPtr deviceAddress;
	public ulong size;
	public VkImageViewAddressPropertiesNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewAddressPropertiesNVX;
		#else
		this = default;
		sType = VkStructureType.ImageViewAddressPropertiesNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTextureLODGatherFormatPropertiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supportsTextureGatherLODBiasAMD;
	public VkTextureLODGatherFormatPropertiesAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.TextureLODGatherFormatPropertiesAMD;
		#else
		this = default;
		sType = VkStructureType.TextureLODGatherFormatPropertiesAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderResourceUsageAMD
{
	public uint numUsedVgprs;
	public uint numUsedSgprs;
	public uint ldsSizePerLocalWorkGroup;
	public nuint ldsUsageSizeInBytes;
	public nuint scratchMemUsageInBytes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderStatisticsInfoAMD
{
	public VkShaderStageFlags shaderStageMask;
	public VkShaderResourceUsageAMD resourceUsage;
	public uint numPhysicalVgprs;
	public uint numPhysicalSgprs;
	public uint numAvailableVgprs;
	public uint numAvailableSgprs;
	public unsafe fixed uint computeWorkGroupSize[3];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 cornerSampledImage;
	public VkPhysicalDeviceCornerSampledImageFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCornerSampledImageFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCornerSampledImageFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalImageFormatPropertiesNV
{
	public VkImageFormatProperties imageFormatProperties;
	public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
	public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
	public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalMemoryImageCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	public VkExternalMemoryImageCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalMemoryImageCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.ExternalMemoryImageCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExportMemoryAllocateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlagsNV handleTypes;
	public VkExportMemoryAllocateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExportMemoryAllocateInfoNV;
		#else
		this = default;
		sType = VkStructureType.ExportMemoryAllocateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationFlagsEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint disabledValidationCheckCount;
	public unsafe VkValidationCheckEXT* pDisabledValidationChecks;
	public VkValidationFlagsEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ValidationFlagsEXT;
		#else
		this = default;
		sType = VkStructureType.ValidationFlagsEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewASTCDecodeModeEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat decodeMode;
	public VkImageViewASTCDecodeModeEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewASTCDecodeModeEXT;
		#else
		this = default;
		sType = VkStructureType.ImageViewASTCDecodeModeEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 decodeModeSharedExponent;
	public VkPhysicalDeviceASTCDecodeFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceASTCDecodeFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceASTCDecodeFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkConditionalRenderingBeginInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer buffer;
	public ulong offset;
	public VkConditionalRenderingFlagsEXT flags;
	public VkConditionalRenderingBeginInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ConditionalRenderingBeginInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ConditionalRenderingBeginInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 conditionalRendering;
	public VkBool32 inheritedConditionalRendering;
	public VkPhysicalDeviceConditionalRenderingFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceConditionalRenderingFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceConditionalRenderingFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 conditionalRenderingEnable;
	public VkCommandBufferInheritanceConditionalRenderingInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferInheritanceConditionalRenderingInfoEXT;
		#else
		this = default;
		sType = VkStructureType.CommandBufferInheritanceConditionalRenderingInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewportWScalingNV
{
	public float xcoeff;
	public float ycoeff;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportWScalingStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 viewportWScalingEnable;
	public uint viewportCount;
	public unsafe VkViewportWScalingNV* pViewportWScalings;
	public VkPipelineViewportWScalingStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportWScalingStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportWScalingStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSurfaceCapabilities2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minImageCount;
	public uint maxImageCount;
	public VkExtent2D currentExtent;
	public VkExtent2D minImageExtent;
	public VkExtent2D maxImageExtent;
	public uint maxImageArrayLayers;
	public VkSurfaceTransformFlagsKHR supportedTransforms;
	public VkSurfaceTransformFlagsKHR currentTransform;
	public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
	public VkImageUsageFlags supportedUsageFlags;
	public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
	public VkSurfaceCapabilities2EXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SurfaceCapabilities2EXT;
		#else
		this = default;
		sType = VkStructureType.SurfaceCapabilities2EXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayPowerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayPowerStateEXT powerState;
	public VkDisplayPowerInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayPowerInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DisplayPowerInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceEventTypeEXT deviceEvent;
	public VkDeviceEventInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceEventInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DeviceEventInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayEventInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDisplayEventTypeEXT displayEvent;
	public VkDisplayEventInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayEventInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DisplayEventInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainCounterCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceCounterFlagsEXT surfaceCounters;
	public VkSwapchainCounterCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SwapchainCounterCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.SwapchainCounterCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRefreshCycleDurationGOOGLE
{
	public ulong refreshDuration;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPastPresentationTimingGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
	public ulong actualPresentTime;
	public ulong earliestPresentTime;
	public ulong presentMargin;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentTimeGOOGLE
{
	public uint presentID;
	public ulong desiredPresentTime;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPresentTimesInfoGOOGLE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint swapchainCount;
	public unsafe VkPresentTimeGOOGLE* pTimes;
	public VkPresentTimesInfoGOOGLE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PresentTimesInfoGOOGLE;
		#else
		this = default;
		sType = VkStructureType.PresentTimesInfoGOOGLE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 perViewPositionAllComponents;
	public VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViewportSwizzleNV
{
	public VkViewportCoordinateSwizzleNV x;
	public VkViewportCoordinateSwizzleNV y;
	public VkViewportCoordinateSwizzleNV z;
	public VkViewportCoordinateSwizzleNV w;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportSwizzleStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
	public uint viewportCount;
	public unsafe VkViewportSwizzleNV* pViewportSwizzles;
	public VkPipelineViewportSwizzleStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportSwizzleStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportSwizzleStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxDiscardRectangles;
	public VkPhysicalDeviceDiscardRectanglePropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDiscardRectanglePropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDiscardRectanglePropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
	public VkDiscardRectangleModeEXT discardRectangleMode;
	public uint discardRectangleCount;
	public unsafe VkRect2D* pDiscardRectangles;
	public VkPipelineDiscardRectangleStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineDiscardRectangleStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineDiscardRectangleStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float primitiveOverestimationSize;
	public float maxExtraPrimitiveOverestimationSize;
	public float extraPrimitiveOverestimationSizeGranularity;
	public VkBool32 primitiveUnderestimation;
	public VkBool32 conservativePointAndLineRasterization;
	public VkBool32 degenerateTrianglesRasterized;
	public VkBool32 degenerateLinesRasterized;
	public VkBool32 fullyCoveredFragmentShaderInputVariable;
	public VkBool32 conservativeRasterizationPostDepthCoverage;
	public VkPhysicalDeviceConservativeRasterizationPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceConservativeRasterizationPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceConservativeRasterizationPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
	public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
	public float extraPrimitiveOverestimationSize;
	public VkPipelineRasterizationConservativeStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationConservativeStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationConservativeStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 depthClipEnable;
	public VkPhysicalDeviceDepthClipEnableFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDepthClipEnableFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDepthClipEnableFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
	public VkBool32 depthClipEnable;
	public VkPipelineRasterizationDepthClipStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationDepthClipStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationDepthClipStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkXYColorEXT
{
	public float x;
	public float y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkHdrMetadataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkXYColorEXT displayPrimaryRed;
	public VkXYColorEXT displayPrimaryGreen;
	public VkXYColorEXT displayPrimaryBlue;
	public VkXYColorEXT whitePoint;
	public float maxLuminance;
	public float minLuminance;
	public float maxContentLightLevel;
	public float maxFrameAverageLightLevel;
	public VkHdrMetadataEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.HdrMetadataEXT;
		#else
		this = default;
		sType = VkStructureType.HdrMetadataEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsLabelEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pLabelName;
	public unsafe fixed float color[4];
	public VkDebugUtilsLabelEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugUtilsLabelEXT;
		#else
		this = default;
		sType = VkStructureType.DebugUtilsLabelEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsObjectNameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public unsafe byte* pObjectName;
	public VkDebugUtilsObjectNameInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugUtilsObjectNameInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugUtilsObjectNameInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsMessengerCallbackDataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
	public unsafe byte* pMessageIdName;
	public int messageIdNumber;
	public unsafe byte* pMessage;
	public uint queueLabelCount;
	public unsafe VkDebugUtilsLabelEXT* pQueueLabels;
	public uint cmdBufLabelCount;
	public unsafe VkDebugUtilsLabelEXT* pCmdBufLabels;
	public uint objectCount;
	public unsafe VkDebugUtilsObjectNameInfoEXT* pObjects;
	public VkDebugUtilsMessengerCallbackDataEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugUtilsMessengerCallbackDataEXT;
		#else
		this = default;
		sType = VkStructureType.DebugUtilsMessengerCallbackDataEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsMessengerCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDebugUtilsMessengerCreateFlagsEXT flags;
	public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
	public VkDebugUtilsMessageTypeFlagsEXT messageType;
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<VkDebugUtilsMessageSeverityFlagsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, uint> pfnUserCallback;
	#else
	public IntPtr pfnUserCallback;
	#endif
	public unsafe void* pUserData;
	public VkDebugUtilsMessengerCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugUtilsMessengerCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugUtilsMessengerCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDebugUtilsObjectTagInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkObjectType objectType;
	public ulong objectHandle;
	public ulong tagName;
	public nuint tagSize;
	public unsafe void* pTag;
	public VkDebugUtilsObjectTagInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DebugUtilsObjectTagInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DebugUtilsObjectTagInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSampleLocationEXT
{
	public float x;
	public float y;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSampleLocationsInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleLocationsPerPixel;
	public VkExtent2D sampleLocationGridSize;
	public uint sampleLocationsCount;
	public unsafe VkSampleLocationEXT* pSampleLocations;
	public VkSampleLocationsInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SampleLocationsInfoEXT;
		#else
		this = default;
		sType = VkStructureType.SampleLocationsInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAttachmentSampleLocationsEXT
{
	public uint attachmentIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassSampleLocationsEXT
{
	public uint subpassIndex;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassSampleLocationsBeginInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentInitialSampleLocationsCount;
	public unsafe VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
	public uint postSubpassSampleLocationsCount;
	public unsafe VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
	public VkRenderPassSampleLocationsBeginInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassSampleLocationsBeginInfoEXT;
		#else
		this = default;
		sType = VkStructureType.RenderPassSampleLocationsBeginInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineSampleLocationsStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 sampleLocationsEnable;
	public VkSampleLocationsInfoEXT sampleLocationsInfo;
	public VkPipelineSampleLocationsStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineSampleLocationsStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineSampleLocationsStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags sampleLocationSampleCounts;
	public VkExtent2D maxSampleLocationGridSize;
	public unsafe fixed float sampleLocationCoordinateRange[2];
	public uint sampleLocationSubPixelBits;
	public VkBool32 variableSampleLocations;
	public VkPhysicalDeviceSampleLocationsPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSampleLocationsPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSampleLocationsPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultisamplePropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D maxSampleLocationGridSize;
	public VkMultisamplePropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MultisamplePropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.MultisamplePropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 advancedBlendCoherentOperations;
	public VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint advancedBlendMaxColorAttachments;
	public VkBool32 advancedBlendIndependentBlend;
	public VkBool32 advancedBlendNonPremultipliedSrcColor;
	public VkBool32 advancedBlendNonPremultipliedDstColor;
	public VkBool32 advancedBlendCorrelatedOverlap;
	public VkBool32 advancedBlendAllOperations;
	public VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceBlendOperationAdvancedPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 srcPremultiplied;
	public VkBool32 dstPremultiplied;
	public VkBlendOverlapEXT blendOverlap;
	public VkPipelineColorBlendAdvancedStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineColorBlendAdvancedStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineColorBlendAdvancedStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageToColorStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageToColorStateCreateFlagsNV flags;
	public VkBool32 coverageToColorEnable;
	public uint coverageToColorLocation;
	public VkPipelineCoverageToColorStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCoverageToColorStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineCoverageToColorStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageModulationStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageModulationStateCreateFlagsNV flags;
	public VkCoverageModulationModeNV coverageModulationMode;
	public VkBool32 coverageModulationTableEnable;
	public uint coverageModulationTableCount;
	public unsafe float* pCoverageModulationTable;
	public VkPipelineCoverageModulationStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCoverageModulationStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineCoverageModulationStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderSMCount;
	public uint shaderWarpsPerSM;
	public VkPhysicalDeviceShaderSMBuiltinsPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderSMBuiltins;
	public VkPhysicalDeviceShaderSMBuiltinsFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderSMBuiltinsFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesEXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesListEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
	public VkDrmFormatModifierPropertiesListEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DrmFormatModifierPropertiesListEXT;
		#else
		this = default;
		sType = VkStructureType.DrmFormatModifierPropertiesListEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;
	public VkSharingMode sharingMode;
	public uint queueFamilyIndexCount;
	public unsafe uint* pQueueFamilyIndices;
	public VkPhysicalDeviceImageDrmFormatModifierInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImageDrmFormatModifierInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImageDrmFormatModifierInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierListCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe ulong* pDrmFormatModifiers;
	public VkImageDrmFormatModifierListCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageDrmFormatModifierListCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ImageDrmFormatModifierListCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public unsafe VkSubresourceLayout* pPlaneLayouts;
	public VkImageDrmFormatModifierExplicitCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageDrmFormatModifierExplicitCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ImageDrmFormatModifierExplicitCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageDrmFormatModifierPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong drmFormatModifier;
	public VkImageDrmFormatModifierPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageDrmFormatModifierPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.ImageDrmFormatModifierPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierProperties2EXT
{
	public ulong drmFormatModifier;
	public uint drmFormatModifierPlaneCount;
	public VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrmFormatModifierPropertiesList2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint drmFormatModifierCount;
	public unsafe VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
	public VkDrmFormatModifierPropertiesList2EXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DrmFormatModifierPropertiesList2EXT;
		#else
		this = default;
		sType = VkStructureType.DrmFormatModifierPropertiesList2EXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationCacheCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkValidationCacheCreateFlagsEXT flags;
	public nuint initialDataSize;
	public unsafe void* pInitialData;
	public VkValidationCacheCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ValidationCacheCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ValidationCacheCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShaderModuleValidationCacheCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkValidationCacheEXT validationCache;
	public VkShaderModuleValidationCacheCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ShaderModuleValidationCacheCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ShaderModuleValidationCacheCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkShadingRatePaletteNV
{
	public uint shadingRatePaletteEntryCount;
	public unsafe VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shadingRateImageEnable;
	public uint viewportCount;
	public unsafe VkShadingRatePaletteNV* pShadingRatePalettes;
	public VkPipelineViewportShadingRateImageStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportShadingRateImageStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportShadingRateImageStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shadingRateImage;
	public VkBool32 shadingRateCoarseSampleOrder;
	public VkPhysicalDeviceShadingRateImageFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShadingRateImageFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShadingRateImageFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D shadingRateTexelSize;
	public uint shadingRatePaletteSize;
	public uint shadingRateMaxCoarseSamples;
	public VkPhysicalDeviceShadingRateImagePropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShadingRateImagePropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShadingRateImagePropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCoarseSampleLocationNV
{
	public uint pixelX;
	public uint pixelY;
	public uint sample;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCoarseSampleOrderCustomNV
{
	public VkShadingRatePaletteEntryNV shadingRate;
	public uint sampleCount;
	public uint sampleLocationCount;
	public unsafe VkCoarseSampleLocationNV* pSampleLocations;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCoarseSampleOrderTypeNV sampleOrderType;
	public uint customSampleOrderCount;
	public unsafe VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
	public VkPipelineViewportCoarseSampleOrderStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportCoarseSampleOrderStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingShaderGroupCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;
	public VkRayTracingShaderGroupCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RayTracingShaderGroupCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.RayTracingShaderGroupCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public unsafe VkRayTracingShaderGroupCreateInfoNV* pGroups;
	public uint maxRecursionDepth;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;
	public VkRayTracingPipelineCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RayTracingPipelineCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.RayTracingPipelineCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryTrianglesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer vertexData;
	public ulong vertexOffset;
	public uint vertexCount;
	public ulong vertexStride;
	public VkFormat vertexFormat;
	public VkBuffer indexData;
	public ulong indexOffset;
	public uint indexCount;
	public VkIndexType indexType;
	public VkBuffer transformData;
	public ulong transformOffset;
	public VkGeometryTrianglesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GeometryTrianglesNV;
		#else
		this = default;
		sType = VkStructureType.GeometryTrianglesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryAABBNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBuffer aabbData;
	public uint numAABBs;
	public uint stride;
	public ulong offset;
	public VkGeometryAABBNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GeometryAABBNV;
		#else
		this = default;
		sType = VkStructureType.GeometryAABBNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryDataNV
{
	public VkGeometryTrianglesNV triangles;
	public VkGeometryAABBNV aabbs;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeometryNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkGeometryDataNV geometry;
	public VkGeometryFlagsKHR flags;
	public VkGeometryNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GeometryNV;
		#else
		this = default;
		sType = VkStructureType.GeometryNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsNV flags;
	public uint instanceCount;
	public uint geometryCount;
	public unsafe VkGeometryNV* pGeometries;
	public VkAccelerationStructureInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureInfoNV;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong compactedSize;
	public VkAccelerationStructureInfoNV info;
	public VkAccelerationStructureCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindAccelerationStructureMemoryInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public uint deviceIndexCount;
	public unsafe uint* pDeviceIndices;
	public VkBindAccelerationStructureMemoryInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BindAccelerationStructureMemoryInfoNV;
		#else
		this = default;
		sType = VkStructureType.BindAccelerationStructureMemoryInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetAccelerationStructureNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint accelerationStructureCount;
	public unsafe VkAccelerationStructureKHR* pAccelerationStructures;
	public VkWriteDescriptorSetAccelerationStructureNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.WriteDescriptorSetAccelerationStructureNV;
		#else
		this = default;
		sType = VkStructureType.WriteDescriptorSetAccelerationStructureNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMemoryRequirementsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureMemoryRequirementsTypeKHR type;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkAccelerationStructureMemoryRequirementsInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureMemoryRequirementsInfoNV;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureMemoryRequirementsInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxTriangleCount;
	public uint maxDescriptorSetAccelerationStructures;
	public VkPhysicalDeviceRayTracingPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRayTracingPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRayTracingPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAabbPositionsKHR
{
	public float minX;
	public float minY;
	public float minZ;
	public float maxX;
	public float maxY;
	public float maxZ;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 representativeFragmentTest;
	public VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRepresentativeFragmentTestFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 representativeFragmentTestEnable;
	public VkPipelineRepresentativeFragmentTestStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRepresentativeFragmentTestStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineRepresentativeFragmentTestStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageViewType imageViewType;
	public VkPhysicalDeviceImageViewImageFormatInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImageViewImageFormatInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImageViewImageFormatInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 filterCubic;
	public VkBool32 filterCubicMinmax;
	public VkFilterCubicImageViewImageFormatPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FilterCubicImageViewImageFormatPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.FilterCubicImageViewImageFormatPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportMemoryHostPointerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExternalMemoryHandleTypeFlags handleType;
	public unsafe void* pHostPointer;
	public VkImportMemoryHostPointerInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImportMemoryHostPointerInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ImportMemoryHostPointerInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryHostPointerPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryTypeBits;
	public VkMemoryHostPointerPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryHostPointerPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.MemoryHostPointerPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong minImportedHostPointerAlignment;
	public VkPhysicalDeviceExternalMemoryHostPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalMemoryHostPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalMemoryHostPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCompilerControlCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCompilerControlFlagsAMD compilerControlFlags;
	public VkPipelineCompilerControlCreateInfoAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCompilerControlCreateInfoAMD;
		#else
		this = default;
		sType = VkStructureType.PipelineCompilerControlCreateInfoAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCalibratedTimestampInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkTimeDomainEXT timeDomain;
	public VkCalibratedTimestampInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CalibratedTimestampInfoEXT;
		#else
		this = default;
		sType = VkStructureType.CalibratedTimestampInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCorePropertiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderEngineCount;
	public uint shaderArraysPerEngineCount;
	public uint computeUnitsPerShaderArray;
	public uint simdPerComputeUnit;
	public uint wavefrontsPerSimd;
	public uint wavefrontSize;
	public uint sgprsPerSimd;
	public uint minSgprAllocation;
	public uint maxSgprAllocation;
	public uint sgprAllocationGranularity;
	public uint vgprsPerSimd;
	public uint minVgprAllocation;
	public uint maxVgprAllocation;
	public uint vgprAllocationGranularity;
	public VkPhysicalDeviceShaderCorePropertiesAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderCorePropertiesAMD;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderCorePropertiesAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryOverallocationCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
	public VkDeviceMemoryOverallocationCreateInfoAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceMemoryOverallocationCreateInfoAMD;
		#else
		this = default;
		sType = VkStructureType.DeviceMemoryOverallocationCreateInfoAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVertexAttribDivisor;
	public VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDivisorDescriptionEXT
{
	public uint binding;
	public uint divisor;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint vertexBindingDivisorCount;
	public unsafe VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors;
	public VkPipelineVertexInputDivisorStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineVertexInputDivisorStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineVertexInputDivisorStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vertexAttributeInstanceRateDivisor;
	public VkBool32 vertexAttributeInstanceRateZeroDivisor;
	public VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVertexAttributeDivisorFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 computeDerivativeGroupQuads;
	public VkBool32 computeDerivativeGroupLinear;
	public VkPhysicalDeviceComputeShaderDerivativesFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceComputeShaderDerivativesFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceComputeShaderDerivativesFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 taskShader;
	public VkBool32 meshShader;
	public VkPhysicalDeviceMeshShaderFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMeshShaderFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMeshShaderPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxDrawMeshTasksCount;
	public uint maxTaskWorkGroupInvocations;
	public unsafe fixed uint maxTaskWorkGroupSize[3];
	public uint maxTaskTotalMemorySize;
	public uint maxTaskOutputCount;
	public uint maxMeshWorkGroupInvocations;
	public unsafe fixed uint maxMeshWorkGroupSize[3];
	public uint maxMeshTotalMemorySize;
	public uint maxMeshOutputVertices;
	public uint maxMeshOutputPrimitives;
	public uint maxMeshMultiviewViewCount;
	public uint meshOutputPerVertexGranularity;
	public uint meshOutputPerPrimitiveGranularity;
	public VkPhysicalDeviceMeshShaderPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMeshShaderPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDrawMeshTasksIndirectCommandNV
{
	public uint taskCount;
	public uint firstTask;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShaderBarycentric;
	public VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShaderBarycentricFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 imageFootprint;
	public VkPhysicalDeviceShaderImageFootprintFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderImageFootprintFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderImageFootprintFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint exclusiveScissorCount;
	public unsafe VkRect2D* pExclusiveScissors;
	public VkPipelineViewportExclusiveScissorStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportExclusiveScissorStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportExclusiveScissorStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 exclusiveScissor;
	public VkPhysicalDeviceExclusiveScissorFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExclusiveScissorFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExclusiveScissorFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyCheckpointPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags checkpointExecutionStageMask;
	public VkQueueFamilyCheckpointPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueueFamilyCheckpointPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.QueueFamilyCheckpointPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCheckpointDataNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineStageFlags stage;
	public unsafe void* pCheckpointMarker;
	public VkCheckpointDataNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CheckpointDataNV;
		#else
		this = default;
		sType = VkStructureType.CheckpointDataNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderIntegerFunctions2;
	public VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkPerformanceValueDataINTEL
{
	[FieldOffset(0)]
	public uint value32;
	[FieldOffset(0)]
	public ulong value64;
	[FieldOffset(0)]
	public float valueFloat;
	[FieldOffset(0)]
	public VkBool32 valueBool;
	[FieldOffset(0)]
	public unsafe byte* valueString;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceValueINTEL
{
	public VkPerformanceValueTypeINTEL type;
	public VkPerformanceValueDataINTEL data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkInitializePerformanceApiInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe void* pUserData;
	public VkInitializePerformanceApiInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.InitializePerformanceApiInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.InitializePerformanceApiInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
	public VkQueryPoolPerformanceQueryCreateInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueryPoolPerformanceQueryCreateInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.QueryPoolPerformanceQueryCreateInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceMarkerInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong marker;
	public VkPerformanceMarkerInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceMarkerInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.PerformanceMarkerInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceStreamMarkerInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint marker;
	public VkPerformanceStreamMarkerInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceStreamMarkerInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.PerformanceStreamMarkerInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceOverrideInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceOverrideTypeINTEL type;
	public VkBool32 enable;
	public ulong parameter;
	public VkPerformanceOverrideInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceOverrideInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.PerformanceOverrideInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPerformanceConfigurationAcquireInfoINTEL
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPerformanceConfigurationTypeINTEL type;
	public VkPerformanceConfigurationAcquireInfoINTEL()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PerformanceConfigurationAcquireInfoINTEL;
		#else
		this = default;
		sType = VkStructureType.PerformanceConfigurationAcquireInfoINTEL;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint pciDomain;
	public uint pciBus;
	public uint pciDevice;
	public uint pciFunction;
	public VkPhysicalDevicePCIBusInfoPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePCIBusInfoPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePCIBusInfoPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 localDimmingSupport;
	public VkDisplayNativeHdrSurfaceCapabilitiesAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DisplayNativeHdrSurfaceCapabilitiesAMD;
		#else
		this = default;
		sType = VkStructureType.DisplayNativeHdrSurfaceCapabilitiesAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 localDimmingEnable;
	public VkSwapchainDisplayNativeHdrCreateInfoAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SwapchainDisplayNativeHdrCreateInfoAMD;
		#else
		this = default;
		sType = VkStructureType.SwapchainDisplayNativeHdrCreateInfoAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMap;
	public VkBool32 fragmentDensityMapDynamic;
	public VkBool32 fragmentDensityMapNonSubsampledImages;
	public VkPhysicalDeviceFragmentDensityMapFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D minFragmentDensityTexelSize;
	public VkExtent2D maxFragmentDensityTexelSize;
	public VkBool32 fragmentDensityInvocations;
	public VkPhysicalDeviceFragmentDensityMapPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAttachmentReference fragmentDensityMapAttachment;
	public VkRenderPassFragmentDensityMapCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassFragmentDensityMapCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.RenderPassFragmentDensityMapCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderCoreProperties2AMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
	public uint activeComputeUnitCount;
	public VkPhysicalDeviceShaderCoreProperties2AMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderCoreProperties2AMD;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderCoreProperties2AMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceCoherentMemory;
	public VkPhysicalDeviceCoherentMemoryFeaturesAMD()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCoherentMemoryFeaturesAMD;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCoherentMemoryFeaturesAMD;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderImageInt64Atomics;
	public VkBool32 sparseImageInt64Atomics;
	public VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong heapBudget_0;
	public ulong heapBudget_1;
	public ulong heapBudget_2;
	public ulong heapBudget_3;
	public ulong heapBudget_4;
	public ulong heapBudget_5;
	public ulong heapBudget_6;
	public ulong heapBudget_7;
	public ulong heapBudget_8;
	public ulong heapBudget_9;
	public ulong heapBudget_10;
	public ulong heapBudget_11;
	public ulong heapBudget_12;
	public ulong heapBudget_13;
	public ulong heapBudget_14;
	public ulong heapBudget_15;
	public ulong heapUsage_0;
	public ulong heapUsage_1;
	public ulong heapUsage_2;
	public ulong heapUsage_3;
	public ulong heapUsage_4;
	public ulong heapUsage_5;
	public ulong heapUsage_6;
	public ulong heapUsage_7;
	public ulong heapUsage_8;
	public ulong heapUsage_9;
	public ulong heapUsage_10;
	public ulong heapUsage_11;
	public ulong heapUsage_12;
	public ulong heapUsage_13;
	public ulong heapUsage_14;
	public ulong heapUsage_15;
	public VkPhysicalDeviceMemoryBudgetPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMemoryBudgetPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMemoryBudgetPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 memoryPriority;
	public VkPhysicalDeviceMemoryPriorityFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMemoryPriorityFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMemoryPriorityFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryPriorityAllocateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float priority;
	public VkMemoryPriorityAllocateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryPriorityAllocateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.MemoryPriorityAllocateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 dedicatedAllocationImageAliasing;
	public VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 bufferDeviceAddress;
	public VkBool32 bufferDeviceAddressCaptureReplay;
	public VkBool32 bufferDeviceAddressMultiDevice;
	public VkPhysicalDeviceBufferDeviceAddressFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceBufferDeviceAddressFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBufferDeviceAddressCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public IntPtr deviceAddress;
	public VkBufferDeviceAddressCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.BufferDeviceAddressCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.BufferDeviceAddressCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkValidationFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint enabledValidationFeatureCount;
	public unsafe VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
	public uint disabledValidationFeatureCount;
	public unsafe VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
	public VkValidationFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ValidationFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.ValidationFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCooperativeMatrixPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint MSize;
	public uint NSize;
	public uint KSize;
	public VkComponentTypeNV AType;
	public VkComponentTypeNV BType;
	public VkComponentTypeNV CType;
	public VkComponentTypeNV DType;
	public VkScopeNV scope;
	public VkCooperativeMatrixPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CooperativeMatrixPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.CooperativeMatrixPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 cooperativeMatrix;
	public VkBool32 cooperativeMatrixRobustBufferAccess;
	public VkPhysicalDeviceCooperativeMatrixFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCooperativeMatrixFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCooperativeMatrixFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkShaderStageFlags cooperativeMatrixSupportedStages;
	public VkPhysicalDeviceCooperativeMatrixPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCooperativeMatrixPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCooperativeMatrixPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 coverageReductionMode;
	public VkPhysicalDeviceCoverageReductionModeFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCoverageReductionModeFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCoverageReductionModeFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineCoverageReductionStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCoverageReductionStateCreateFlagsNV flags;
	public VkCoverageReductionModeNV coverageReductionMode;
	public VkPipelineCoverageReductionStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineCoverageReductionStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineCoverageReductionStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkFramebufferMixedSamplesCombinationNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkCoverageReductionModeNV coverageReductionMode;
	public VkSampleCountFlags rasterizationSamples;
	public VkSampleCountFlags depthStencilSamples;
	public VkSampleCountFlags colorSamples;
	public VkFramebufferMixedSamplesCombinationNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.FramebufferMixedSamplesCombinationNV;
		#else
		this = default;
		sType = VkStructureType.FramebufferMixedSamplesCombinationNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShaderSampleInterlock;
	public VkBool32 fragmentShaderPixelInterlock;
	public VkBool32 fragmentShaderShadingRateInterlock;
	public VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShaderInterlockFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShaderInterlockFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 ycbcrImageArrays;
	public VkPhysicalDeviceYcbcrImageArraysFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceYcbcrImageArraysFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceYcbcrImageArraysFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 provokingVertexLast;
	public VkBool32 transformFeedbackPreservesProvokingVertex;
	public VkPhysicalDeviceProvokingVertexFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceProvokingVertexFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceProvokingVertexFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 provokingVertexModePerPipeline;
	public VkBool32 transformFeedbackPreservesTriangleFanProvokingVertex;
	public VkPhysicalDeviceProvokingVertexPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceProvokingVertexPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceProvokingVertexPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkProvokingVertexModeEXT provokingVertexMode;
	public VkPipelineRasterizationProvokingVertexStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationProvokingVertexStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationProvokingVertexStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkHeadlessSurfaceCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkHeadlessSurfaceCreateFlagsEXT flags;
	public VkHeadlessSurfaceCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.HeadlessSurfaceCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.HeadlessSurfaceCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rectangularLines;
	public VkBool32 bresenhamLines;
	public VkBool32 smoothLines;
	public VkBool32 stippledRectangularLines;
	public VkBool32 stippledBresenhamLines;
	public VkBool32 stippledSmoothLines;
	public VkPhysicalDeviceLineRasterizationFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceLineRasterizationFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceLineRasterizationFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint lineSubPixelPrecisionBits;
	public VkPhysicalDeviceLineRasterizationPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceLineRasterizationPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceLineRasterizationPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineRasterizationLineStateCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkLineRasterizationModeEXT lineRasterizationMode;
	public VkBool32 stippledLineEnable;
	public uint lineStippleFactor;
	public ushort lineStipplePattern;
	public VkPipelineRasterizationLineStateCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineRasterizationLineStateCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineRasterizationLineStateCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferFloat32Atomics;
	public VkBool32 shaderBufferFloat32AtomicAdd;
	public VkBool32 shaderBufferFloat64Atomics;
	public VkBool32 shaderBufferFloat64AtomicAdd;
	public VkBool32 shaderSharedFloat32Atomics;
	public VkBool32 shaderSharedFloat32AtomicAdd;
	public VkBool32 shaderSharedFloat64Atomics;
	public VkBool32 shaderSharedFloat64AtomicAdd;
	public VkBool32 shaderImageFloat32Atomics;
	public VkBool32 shaderImageFloat32AtomicAdd;
	public VkBool32 sparseImageFloat32Atomics;
	public VkBool32 sparseImageFloat32AtomicAdd;
	public VkPhysicalDeviceShaderAtomicFloatFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderAtomicFloatFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderAtomicFloatFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 indexTypeUint8;
	public VkPhysicalDeviceIndexTypeUint8FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceIndexTypeUint8FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceIndexTypeUint8FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 extendedDynamicState;
	public VkPhysicalDeviceExtendedDynamicStateFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExtendedDynamicStateFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExtendedDynamicStateFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 shaderBufferFloat16Atomics;
	public VkBool32 shaderBufferFloat16AtomicAdd;
	public VkBool32 shaderBufferFloat16AtomicMinMax;
	public VkBool32 shaderBufferFloat32AtomicMinMax;
	public VkBool32 shaderBufferFloat64AtomicMinMax;
	public VkBool32 shaderSharedFloat16Atomics;
	public VkBool32 shaderSharedFloat16AtomicAdd;
	public VkBool32 shaderSharedFloat16AtomicMinMax;
	public VkBool32 shaderSharedFloat32AtomicMinMax;
	public VkBool32 shaderSharedFloat64AtomicMinMax;
	public VkBool32 shaderImageFloat32AtomicMinMax;
	public VkBool32 sparseImageFloat32AtomicMinMax;
	public VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceShaderAtomicFloat2FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceShaderAtomicFloat2FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxGraphicsShaderGroupCount;
	public uint maxIndirectSequenceCount;
	public uint maxIndirectCommandsTokenCount;
	public uint maxIndirectCommandsStreamCount;
	public uint maxIndirectCommandsTokenOffset;
	public uint maxIndirectCommandsStreamStride;
	public uint minSequencesCountBufferOffsetAlignment;
	public uint minSequencesIndexBufferOffsetAlignment;
	public uint minIndirectCommandsBufferOffsetAlignment;
	public VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceGeneratedCommands;
	public VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsShaderGroupCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
	public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;
	public VkGraphicsShaderGroupCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GraphicsShaderGroupCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.GraphicsShaderGroupCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint groupCount;
	public unsafe VkGraphicsShaderGroupCreateInfoNV* pGroups;
	public uint pipelineCount;
	public unsafe VkPipeline* pPipelines;
	public VkGraphicsPipelineShaderGroupsCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GraphicsPipelineShaderGroupsCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.GraphicsPipelineShaderGroupsCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindShaderGroupIndirectCommandNV
{
	public uint groupIndex;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindIndexBufferIndirectCommandNV
{
	public IntPtr bufferAddress;
	public uint size;
	public VkIndexType indexType;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkBindVertexBufferIndirectCommandNV
{
	public IntPtr bufferAddress;
	public uint size;
	public uint stride;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSetStateFlagsIndirectCommandNV
{
	public uint data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsStreamNV
{
	public VkBuffer buffer;
	public ulong offset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsLayoutTokenNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIndirectCommandsTokenTypeNV tokenType;
	public uint stream;
	public uint offset;
	public uint vertexBindingUnit;
	public VkBool32 vertexDynamicStride;
	public VkPipelineLayout pushconstantPipelineLayout;
	public VkShaderStageFlags pushconstantShaderStageFlags;
	public uint pushconstantOffset;
	public uint pushconstantSize;
	public VkIndirectStateFlagsNV indirectStateFlags;
	public uint indexTypeCount;
	public unsafe VkIndexType* pIndexTypes;
	public unsafe uint* pIndexTypeValues;
	public VkIndirectCommandsLayoutTokenNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.IndirectCommandsLayoutTokenNV;
		#else
		this = default;
		sType = VkStructureType.IndirectCommandsLayoutTokenNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIndirectCommandsLayoutCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIndirectCommandsLayoutUsageFlagsNV flags;
	public VkPipelineBindPoint pipelineBindPoint;
	public uint tokenCount;
	public unsafe VkIndirectCommandsLayoutTokenNV* pTokens;
	public uint streamCount;
	public unsafe uint* pStreamStrides;
	public VkIndirectCommandsLayoutCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.IndirectCommandsLayoutCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.IndirectCommandsLayoutCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeneratedCommandsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint streamCount;
	public unsafe VkIndirectCommandsStreamNV* pStreams;
	public uint sequencesCount;
	public VkBuffer preprocessBuffer;
	public ulong preprocessOffset;
	public ulong preprocessSize;
	public VkBuffer sequencesCountBuffer;
	public ulong sequencesCountOffset;
	public VkBuffer sequencesIndexBuffer;
	public ulong sequencesIndexOffset;
	public VkGeneratedCommandsInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GeneratedCommandsInfoNV;
		#else
		this = default;
		sType = VkStructureType.GeneratedCommandsInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineBindPoint pipelineBindPoint;
	public VkPipeline pipeline;
	public VkIndirectCommandsLayoutNV indirectCommandsLayout;
	public uint maxSequencesCount;
	public VkGeneratedCommandsMemoryRequirementsInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GeneratedCommandsMemoryRequirementsInfoNV;
		#else
		this = default;
		sType = VkStructureType.GeneratedCommandsMemoryRequirementsInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 inheritedViewportScissor2D;
	public VkPhysicalDeviceInheritedViewportScissorFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceInheritedViewportScissorFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceInheritedViewportScissorFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceViewportScissorInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 viewportScissor2D;
	public uint viewportDepthCount;
	public unsafe VkViewport* pViewportDepths;
	public VkCommandBufferInheritanceViewportScissorInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferInheritanceViewportScissorInfoNV;
		#else
		this = default;
		sType = VkStructureType.CommandBufferInheritanceViewportScissorInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 texelBufferAlignment;
	public VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceTexelBufferAlignmentFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRenderPassTransformBeginInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;
	public VkRenderPassTransformBeginInfoQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RenderPassTransformBeginInfoQCOM;
		#else
		this = default;
		sType = VkStructureType.RenderPassTransformBeginInfoQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;
	public VkRect2D renderArea;
	public VkCommandBufferInheritanceRenderPassTransformInfoQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CommandBufferInheritanceRenderPassTransformInfoQCOM;
		#else
		this = default;
		sType = VkStructureType.CommandBufferInheritanceRenderPassTransformInfoQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 deviceMemoryReport;
	public VkPhysicalDeviceDeviceMemoryReportFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDeviceMemoryReportFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDeviceMemoryReportFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceMemoryReportCallbackDataEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	public VkDeviceMemoryReportEventTypeEXT type;
	public ulong memoryObjectId;
	public ulong size;
	public VkObjectType objectType;
	public ulong objectHandle;
	public uint heapIndex;
	public VkDeviceMemoryReportCallbackDataEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceMemoryReportCallbackDataEXT;
		#else
		this = default;
		sType = VkStructureType.DeviceMemoryReportCallbackDataEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemoryReportFlagsEXT flags;
	#if NET6_0_OR_GREATER
	public unsafe delegate* unmanaged<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback;
	#else
	public IntPtr pfnUserCallback;
	#endif
	public unsafe void* pUserData;
	public VkDeviceDeviceMemoryReportCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceDeviceMemoryReportCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.DeviceDeviceMemoryReportCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRobustness2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 robustBufferAccess2;
	public VkBool32 robustImageAccess2;
	public VkBool32 nullDescriptor;
	public VkPhysicalDeviceRobustness2FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRobustness2FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRobustness2FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRobustness2PropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong robustStorageBufferAccessSizeAlignment;
	public ulong robustUniformBufferAccessSizeAlignment;
	public VkPhysicalDeviceRobustness2PropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRobustness2PropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRobustness2PropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerCustomBorderColorCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkClearColorValue customBorderColor;
	public VkFormat format;
	public VkSamplerCustomBorderColorCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerCustomBorderColorCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.SamplerCustomBorderColorCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxCustomBorderColorSamplers;
	public VkPhysicalDeviceCustomBorderColorPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCustomBorderColorPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCustomBorderColorPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 customBorderColors;
	public VkBool32 customBorderColorWithoutFormat;
	public VkPhysicalDeviceCustomBorderColorFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceCustomBorderColorFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceCustomBorderColorFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 diagnosticsConfig;
	public VkPhysicalDeviceDiagnosticsConfigFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDiagnosticsConfigFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDiagnosticsConfigFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDeviceDiagnosticsConfigCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceDiagnosticsConfigFlagsNV flags;
	public VkDeviceDiagnosticsConfigCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DeviceDiagnosticsConfigCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.DeviceDiagnosticsConfigCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 graphicsPipelineLibrary;
	public VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 graphicsPipelineLibraryFastLinking;
	public VkBool32 graphicsPipelineLibraryIndependentInterpolationDecoration;
	public VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkGraphicsPipelineLibraryCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGraphicsPipelineLibraryFlagsEXT flags;
	public VkGraphicsPipelineLibraryCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.GraphicsPipelineLibraryCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.GraphicsPipelineLibraryCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentShadingRateEnums;
	public VkBool32 supersampleFragmentShadingRates;
	public VkBool32 noInvocationFragmentShadingRates;
	public VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSampleCountFlags maxFragmentShadingRateInvocationCount;
	public VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFragmentShadingRateTypeNV shadingRateType;
	public VkFragmentShadingRateNV shadingRate;
	public VkFragmentShadingRateCombinerOpKHR combinerOps_0;
	public VkFragmentShadingRateCombinerOpKHR combinerOps_1;
	public VkPipelineFragmentShadingRateEnumStateCreateInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineFragmentShadingRateEnumStateCreateInfoNV;
		#else
		this = default;
		sType = VkStructureType.PipelineFragmentShadingRateEnumStateCreateInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkDeviceOrHostAddressConstKHR
{
	[FieldOffset(0)]
	public IntPtr deviceAddress;
	[FieldOffset(0)]
	public unsafe void* hostAddress;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public VkAccelerationStructureGeometryMotionTrianglesDataNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureGeometryMotionTrianglesDataNV;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureGeometryMotionTrianglesDataNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMotionInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxInstances;
	public VkAccelerationStructureMotionInfoFlagsNV flags;
	public VkAccelerationStructureMotionInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureMotionInfoNV;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureMotionInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSRTDataNV
{
	public float sx;
	public float a;
	public float b;
	public float pvx;
	public float sy;
	public float c;
	public float pvy;
	public float sz;
	public float pvz;
	public float qx;
	public float qy;
	public float qz;
	public float qw;
	public float tx;
	public float ty;
	public float tz;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureMotionInstanceDataNV
{
	[FieldOffset(0)]
	public VkAccelerationStructureInstanceKHR staticInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
	[FieldOffset(0)]
	public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureMotionInstanceNV
{
	public VkAccelerationStructureMotionInstanceTypeNV type;
	public VkAccelerationStructureMotionInstanceFlagsNV flags;
	public VkAccelerationStructureMotionInstanceDataNV data;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingMotionBlur;
	public VkBool32 rayTracingMotionBlurPipelineTraceRaysIndirect;
	public VkPhysicalDeviceRayTracingMotionBlurFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRayTracingMotionBlurFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRayTracingMotionBlurFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 ycbcr2plane444Formats;
	public VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMapDeferred;
	public VkPhysicalDeviceFragmentDensityMap2FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMap2FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMap2FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subsampledLoads;
	public VkBool32 subsampledCoarseReconstructionEarlyAccess;
	public uint maxSubsampledArrayLayers;
	public uint maxDescriptorSetSubsampledSamplers;
	public VkPhysicalDeviceFragmentDensityMap2PropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMap2PropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMap2PropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyCommandTransformInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkSurfaceTransformFlagsKHR transform;
	public VkCopyCommandTransformInfoQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyCommandTransformInfoQCOM;
		#else
		this = default;
		sType = VkStructureType.CopyCommandTransformInfoQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevice4444FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 formatA4R4G4B4;
	public VkBool32 formatA4B4G4R4;
	public VkPhysicalDevice4444FormatsFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevice4444FormatsFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevice4444FormatsFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rasterizationOrderColorAttachmentAccess;
	public VkBool32 rasterizationOrderDepthAttachmentAccess;
	public VkBool32 rasterizationOrderStencilAttachmentAccess;
	public VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 formatRgba10x6WithoutYCbCrSampler;
	public VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRGBA10X6FormatsFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRGBA10X6FormatsFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 mutableDescriptorType;
	public VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMutableDescriptorTypeFeaturesVALVE;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMutableDescriptorTypeFeaturesVALVE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMutableDescriptorTypeListVALVE
{
	public uint descriptorTypeCount;
	public unsafe VkDescriptorType* pDescriptorTypes;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMutableDescriptorTypeCreateInfoVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint mutableDescriptorTypeListCount;
	public unsafe VkMutableDescriptorTypeListVALVE* pMutableDescriptorTypeLists;
	public VkMutableDescriptorTypeCreateInfoVALVE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MutableDescriptorTypeCreateInfoVALVE;
		#else
		this = default;
		sType = VkStructureType.MutableDescriptorTypeCreateInfoVALVE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 vertexInputDynamicState;
	public VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVertexInputDynamicStateFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVertexInputDynamicStateFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputBindingDescription2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint binding;
	public uint stride;
	public VkVertexInputRate inputRate;
	public uint divisor;
	public VkVertexInputBindingDescription2EXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VertexInputBindingDescription2EXT;
		#else
		this = default;
		sType = VkStructureType.VertexInputBindingDescription2EXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVertexInputAttributeDescription2EXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint location;
	public uint binding;
	public VkFormat format;
	public uint offset;
	public VkVertexInputAttributeDescription2EXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VertexInputAttributeDescription2EXT;
		#else
		this = default;
		sType = VkStructureType.VertexInputAttributeDescription2EXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDrmPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 hasPrimary;
	public VkBool32 hasRender;
	public long primaryMajor;
	public long primaryMinor;
	public long renderMajor;
	public long renderMinor;
	public VkPhysicalDeviceDrmPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDrmPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDrmPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 depthClipControl;
	public VkPhysicalDeviceDepthClipControlFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDepthClipControlFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDepthClipControlFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 negativeOneToOne;
	public VkPipelineViewportDepthClipControlCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineViewportDepthClipControlCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineViewportDepthClipControlCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 primitiveTopologyListRestart;
	public VkBool32 primitiveTopologyPatchListRestart;
	public VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRenderPass renderPass;
	public uint subpass;
	public VkSubpassShadingPipelineCreateInfoHUAWEI()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassShadingPipelineCreateInfoHUAWEI;
		#else
		this = default;
		sType = VkStructureType.SubpassShadingPipelineCreateInfoHUAWEI;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 subpassShading;
	public VkPhysicalDeviceSubpassShadingFeaturesHUAWEI()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSubpassShadingFeaturesHUAWEI;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSubpassShadingFeaturesHUAWEI;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxSubpassShadingWorkgroupSizeAspectRatio;
	public VkPhysicalDeviceSubpassShadingPropertiesHUAWEI()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceSubpassShadingPropertiesHUAWEI;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceSubpassShadingPropertiesHUAWEI;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 invocationMask;
	public VkPhysicalDeviceInvocationMaskFeaturesHUAWEI()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceInvocationMaskFeaturesHUAWEI;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceInvocationMaskFeaturesHUAWEI;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetRemoteAddressInfoNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkExternalMemoryHandleTypeFlags handleType;
	public VkMemoryGetRemoteAddressInfoNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryGetRemoteAddressInfoNV;
		#else
		this = default;
		sType = VkStructureType.MemoryGetRemoteAddressInfoNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 externalMemoryRDMA;
	public VkPhysicalDeviceExternalMemoryRDMAFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExternalMemoryRDMAFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExternalMemoryRDMAFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 extendedDynamicState2;
	public VkBool32 extendedDynamicState2LogicOp;
	public VkBool32 extendedDynamicState2PatchControlPoints;
	public VkPhysicalDeviceExtendedDynamicState2FeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceExtendedDynamicState2FeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceExtendedDynamicState2FeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 colorWriteEnable;
	public VkPhysicalDeviceColorWriteEnableFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceColorWriteEnableFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceColorWriteEnableFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPipelineColorWriteCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint attachmentCount;
	public unsafe VkBool32* pColorWriteEnables;
	public VkPipelineColorWriteCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PipelineColorWriteCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.PipelineColorWriteCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 primitivesGeneratedQuery;
	public VkBool32 primitivesGeneratedQueryWithRasterizerDiscard;
	public VkBool32 primitivesGeneratedQueryWithNonZeroStreams;
	public VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 minLod;
	public VkPhysicalDeviceImageViewMinLodFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImageViewMinLodFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImageViewMinLodFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImageViewMinLodCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public float minLod;
	public VkImageViewMinLodCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImageViewMinLodCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.ImageViewMinLodCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 multiDraw;
	public VkPhysicalDeviceMultiDrawFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMultiDrawFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMultiDrawFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxMultiDrawCount;
	public VkPhysicalDeviceMultiDrawPropertiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceMultiDrawPropertiesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceMultiDrawPropertiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiDrawInfoEXT
{
	public uint firstVertex;
	public uint vertexCount;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMultiDrawIndexedInfoEXT
{
	public uint firstIndex;
	public uint indexCount;
	public int vertexOffset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 image2DViewOf3D;
	public VkBool32 sampler2DViewOf3D;
	public VkPhysicalDeviceImage2DViewOf3DFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceImage2DViewOf3DFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceImage2DViewOf3DFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 borderColorSwizzle;
	public VkBool32 borderColorSwizzleFromImage;
	public VkPhysicalDeviceBorderColorSwizzleFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceBorderColorSwizzleFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceBorderColorSwizzleFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkComponentMapping components;
	public VkBool32 srgb;
	public VkSamplerBorderColorComponentMappingCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SamplerBorderColorComponentMappingCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.SamplerBorderColorComponentMappingCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 pageableDeviceLocalMemory;
	public VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 descriptorSetHostMapping;
	public VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetBindingReferenceVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDescriptorSetLayout descriptorSetLayout;
	public uint binding;
	public VkDescriptorSetBindingReferenceVALVE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetBindingReferenceVALVE;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetBindingReferenceVALVE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkDescriptorSetLayoutHostMappingInfoVALVE
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public nuint descriptorOffset;
	public uint descriptorSize;
	public VkDescriptorSetLayoutHostMappingInfoVALVE()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.DescriptorSetLayoutHostMappingInfoVALVE;
		#else
		this = default;
		sType = VkStructureType.DescriptorSetLayoutHostMappingInfoVALVE;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 fragmentDensityMapOffset;
	public VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkExtent2D fragmentDensityOffsetGranularity;
	public VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint fragmentDensityOffsetCount;
	public unsafe VkOffset2D* pFragmentDensityOffsets;
	public VkSubpassFragmentDensityMapOffsetEndInfoQCOM()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.SubpassFragmentDensityMapOffsetEndInfoQCOM;
		#else
		this = default;
		sType = VkStructureType.SubpassFragmentDensityMapOffsetEndInfoQCOM;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 linearColorAttachment;
	public VkPhysicalDeviceLinearColorAttachmentFeaturesNV()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceLinearColorAttachmentFeaturesNV;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceLinearColorAttachmentFeaturesNV;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkDeviceOrHostAddressKHR
{
	[FieldOffset(0)]
	public IntPtr deviceAddress;
	[FieldOffset(0)]
	public unsafe void* hostAddress;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildRangeInfoKHR
{
	public uint primitiveCount;
	public uint primitiveOffset;
	public uint firstVertex;
	public uint transformOffset;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryTrianglesDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat vertexFormat;
	public VkDeviceOrHostAddressConstKHR vertexData;
	public ulong vertexStride;
	public uint maxVertex;
	public VkIndexType indexType;
	public VkDeviceOrHostAddressConstKHR indexData;
	public VkDeviceOrHostAddressConstKHR transformData;
	public VkAccelerationStructureGeometryTrianglesDataKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureGeometryTrianglesDataKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureGeometryTrianglesDataKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryAabbsDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR data;
	public ulong stride;
	public VkAccelerationStructureGeometryAabbsDataKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureGeometryAabbsDataKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureGeometryAabbsDataKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryInstancesDataKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 arrayOfPointers;
	public VkDeviceOrHostAddressConstKHR data;
	public VkAccelerationStructureGeometryInstancesDataKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureGeometryInstancesDataKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureGeometryInstancesDataKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Explicit)]
public partial struct VkAccelerationStructureGeometryDataKHR
{
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
	[FieldOffset(0)]
	public VkAccelerationStructureGeometryInstancesDataKHR instances;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureGeometryKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkGeometryTypeKHR geometryType;
	public VkAccelerationStructureGeometryDataKHR geometry;
	public VkGeometryFlagsKHR flags;
	public VkAccelerationStructureGeometryKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureGeometryKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureGeometryKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildGeometryInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureTypeKHR type;
	public VkBuildAccelerationStructureFlagsKHR flags;
	public VkBuildAccelerationStructureModeKHR mode;
	public VkAccelerationStructureKHR srcAccelerationStructure;
	public VkAccelerationStructureKHR dstAccelerationStructure;
	public uint geometryCount;
	public unsafe VkAccelerationStructureGeometryKHR* pGeometries;
	public unsafe VkAccelerationStructureGeometryKHR** ppGeometries;
	public VkDeviceOrHostAddressKHR scratchData;
	public VkAccelerationStructureBuildGeometryInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureBuildGeometryInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureBuildGeometryInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureCreateFlagsKHR createFlags;
	public VkBuffer buffer;
	public ulong offset;
	public ulong size;
	public VkAccelerationStructureTypeKHR type;
	public IntPtr deviceAddress;
	public VkAccelerationStructureCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkWriteDescriptorSetAccelerationStructureKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint accelerationStructureCount;
	public unsafe VkAccelerationStructureKHR* pAccelerationStructures;
	public VkWriteDescriptorSetAccelerationStructureKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.WriteDescriptorSetAccelerationStructureKHR;
		#else
		this = default;
		sType = VkStructureType.WriteDescriptorSetAccelerationStructureKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 accelerationStructure;
	public VkBool32 accelerationStructureCaptureReplay;
	public VkBool32 accelerationStructureIndirectBuild;
	public VkBool32 accelerationStructureHostCommands;
	public VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind;
	public VkPhysicalDeviceAccelerationStructureFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceAccelerationStructureFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceAccelerationStructureFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong maxGeometryCount;
	public ulong maxInstanceCount;
	public ulong maxPrimitiveCount;
	public uint maxPerStageDescriptorAccelerationStructures;
	public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
	public uint maxDescriptorSetAccelerationStructures;
	public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
	public uint minAccelerationStructureScratchOffsetAlignment;
	public VkPhysicalDeviceAccelerationStructurePropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceAccelerationStructurePropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceAccelerationStructurePropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureDeviceAddressInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR accelerationStructure;
	public VkAccelerationStructureDeviceAddressInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureDeviceAddressInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureDeviceAddressInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureVersionInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe byte* pVersionData;
	public VkAccelerationStructureVersionInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureVersionInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureVersionInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyAccelerationStructureToMemoryInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR src;
	public VkDeviceOrHostAddressKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;
	public VkCopyAccelerationStructureToMemoryInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyAccelerationStructureToMemoryInfoKHR;
		#else
		this = default;
		sType = VkStructureType.CopyAccelerationStructureToMemoryInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyMemoryToAccelerationStructureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceOrHostAddressConstKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;
	public VkCopyMemoryToAccelerationStructureInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyMemoryToAccelerationStructureInfoKHR;
		#else
		this = default;
		sType = VkStructureType.CopyMemoryToAccelerationStructureInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkCopyAccelerationStructureInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAccelerationStructureKHR src;
	public VkAccelerationStructureKHR dst;
	public VkCopyAccelerationStructureModeKHR mode;
	public VkCopyAccelerationStructureInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.CopyAccelerationStructureInfoKHR;
		#else
		this = default;
		sType = VkStructureType.CopyAccelerationStructureInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAccelerationStructureBuildSizesInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong accelerationStructureSize;
	public ulong updateScratchSize;
	public ulong buildScratchSize;
	public VkAccelerationStructureBuildSizesInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AccelerationStructureBuildSizesInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AccelerationStructureBuildSizesInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingShaderGroupCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkRayTracingShaderGroupTypeKHR type;
	public uint generalShader;
	public uint closestHitShader;
	public uint anyHitShader;
	public uint intersectionShader;
	public unsafe void* pShaderGroupCaptureReplayHandle;
	public VkRayTracingShaderGroupCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RayTracingShaderGroupCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.RayTracingShaderGroupCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxPipelineRayPayloadSize;
	public uint maxPipelineRayHitAttributeSize;
	public VkRayTracingPipelineInterfaceCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RayTracingPipelineInterfaceCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.RayTracingPipelineInterfaceCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkRayTracingPipelineCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkPipelineCreateFlags flags;
	public uint stageCount;
	public unsafe VkPipelineShaderStageCreateInfo* pStages;
	public uint groupCount;
	public unsafe VkRayTracingShaderGroupCreateInfoKHR* pGroups;
	public uint maxPipelineRayRecursionDepth;
	public unsafe VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
	public unsafe VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
	public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
	public VkPipelineLayout layout;
	public VkPipeline basePipelineHandle;
	public int basePipelineIndex;
	public VkRayTracingPipelineCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.RayTracingPipelineCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.RayTracingPipelineCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayTracingPipeline;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay;
	public VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
	public VkBool32 rayTracingPipelineTraceRaysIndirect;
	public VkBool32 rayTraversalPrimitiveCulling;
	public VkPhysicalDeviceRayTracingPipelineFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRayTracingPipelineFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRayTracingPipelineFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint shaderGroupHandleSize;
	public uint maxRayRecursionDepth;
	public uint maxShaderGroupStride;
	public uint shaderGroupBaseAlignment;
	public uint shaderGroupHandleCaptureReplaySize;
	public uint maxRayDispatchInvocationCount;
	public uint shaderGroupHandleAlignment;
	public uint maxRayHitAttributeSize;
	public VkPhysicalDeviceRayTracingPipelinePropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRayTracingPipelinePropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRayTracingPipelinePropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkStridedDeviceAddressRegionKHR
{
	public IntPtr deviceAddress;
	public ulong stride;
	public ulong size;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkTraceRaysIndirectCommandKHR
{
	public uint width;
	public uint height;
	public uint depth;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceRayQueryFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 rayQuery;
	public VkPhysicalDeviceRayQueryFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceRayQueryFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceRayQueryFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidSurfaceCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkAndroidSurfaceCreateFlagsKHR flags;
	public IntPtr window;
	public VkAndroidSurfaceCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AndroidSurfaceCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.AndroidSurfaceCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferUsageANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong androidHardwareBufferUsage;
	public VkAndroidHardwareBufferUsageANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AndroidHardwareBufferUsageAndroid;
		#else
		this = default;
		sType = VkStructureType.AndroidHardwareBufferUsageAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferPropertiesANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong allocationSize;
	public uint memoryTypeBits;
	public VkAndroidHardwareBufferPropertiesANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AndroidHardwareBufferPropertiesAndroid;
		#else
		this = default;
		sType = VkStructureType.AndroidHardwareBufferPropertiesAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferFormatPropertiesANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;
	public VkAndroidHardwareBufferFormatPropertiesANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AndroidHardwareBufferFormatPropertiesAndroid;
		#else
		this = default;
		sType = VkStructureType.AndroidHardwareBufferFormatPropertiesAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkImportAndroidHardwareBufferInfoANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe IntPtr* buffer;
	public VkImportAndroidHardwareBufferInfoANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ImportAndroidHardwareBufferInfoAndroid;
		#else
		this = default;
		sType = VkStructureType.ImportAndroidHardwareBufferInfoAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMemoryGetAndroidHardwareBufferInfoANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkDeviceMemory memory;
	public VkMemoryGetAndroidHardwareBufferInfoANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MemoryGetAndroidHardwareBufferInfoAndroid;
		#else
		this = default;
		sType = VkStructureType.MemoryGetAndroidHardwareBufferInfoAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkExternalFormatANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public ulong externalFormat;
	public VkExternalFormatANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ExternalFormatAndroid;
		#else
		this = default;
		sType = VkStructureType.ExternalFormatAndroid;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkAndroidHardwareBufferFormatProperties2ANDROID
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public ulong externalFormat;
	public VkFormatFeatureFlags2 formatFeatures;
	public VkComponentMapping samplerYcbcrConversionComponents;
	public VkSamplerYcbcrModelConversion suggestedYcbcrModel;
	public VkSamplerYcbcrRange suggestedYcbcrRange;
	public VkChromaLocation suggestedXChromaOffset;
	public VkChromaLocation suggestedYChromaOffset;
	public VkAndroidHardwareBufferFormatProperties2ANDROID()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.AndroidHardwareBufferFormatProperties2Android;
		#else
		this = default;
		sType = VkStructureType.AndroidHardwareBufferFormatProperties2Android;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkIOSSurfaceCreateInfoMVK
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkIOSSurfaceCreateFlagsMVK flags;
	public unsafe void* pView;
	public VkIOSSurfaceCreateInfoMVK()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.IOSSurfaceCreateInfoMVK;
		#else
		this = default;
		sType = VkStructureType.IOSSurfaceCreateInfoMVK;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMacOSSurfaceCreateInfoMVK
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMacOSSurfaceCreateFlagsMVK flags;
	public unsafe void* pView;
	public VkMacOSSurfaceCreateInfoMVK()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MacOSSurfaceCreateInfoMVK;
		#else
		this = default;
		sType = VkStructureType.MacOSSurfaceCreateInfoMVK;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkMetalSurfaceCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkMetalSurfaceCreateFlagsEXT flags;
	public IntPtr pLayer;
	public VkMetalSurfaceCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.MetalSurfaceCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.MetalSurfaceCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkViSurfaceCreateInfoNN
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkViSurfaceCreateFlagsNN flags;
	public unsafe void* window;
	public VkViSurfaceCreateInfoNN()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.ViSurfaceCreateInfoNN;
		#else
		this = default;
		sType = VkStructureType.ViSurfaceCreateInfoNN;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkQueueFamilyQueryResultStatusProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 supported;
	public VkQueueFamilyQueryResultStatusProperties2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.QueueFamilyQueryResultStatusProperties2KHR;
		#else
		this = default;
		sType = VkStructureType.QueueFamilyQueryResultStatusProperties2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoQueueFamilyProperties2KHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperations;
	public VkVideoQueueFamilyProperties2KHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoQueueFamilyProperties2KHR;
		#else
		this = default;
		sType = VkStructureType.VideoQueueFamilyProperties2KHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoProfileKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodecOperationFlagsKHR videoCodecOperation;
	public VkVideoChromaSubsamplingFlagsKHR chromaSubsampling;
	public VkVideoComponentBitDepthFlagsKHR lumaBitDepth;
	public VkVideoComponentBitDepthFlagsKHR chromaBitDepth;
	public VkVideoProfileKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoProfileKHR;
		#else
		this = default;
		sType = VkStructureType.VideoProfileKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoProfilesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint profileCount;
	public unsafe VkVideoProfileKHR* pProfiles;
	public VkVideoProfilesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoProfilesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoProfilesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCapabilityFlagsKHR capabilityFlags;
	public ulong minBitstreamBufferOffsetAlignment;
	public ulong minBitstreamBufferSizeAlignment;
	public VkExtent2D videoPictureExtentGranularity;
	public VkExtent2D minExtent;
	public VkExtent2D maxExtent;
	public uint maxReferencePicturesSlotsCount;
	public uint maxReferencePicturesActiveCount;
	public VkExtensionProperties stdHeaderVersion;
	public VkVideoCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDeviceVideoFormatInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkImageUsageFlags imageUsage;
	public unsafe VkVideoProfilesKHR* pVideoProfiles;
	public VkPhysicalDeviceVideoFormatInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDeviceVideoFormatInfoKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDeviceVideoFormatInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoFormatPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkFormat format;
	public VkVideoFormatPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoFormatPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoFormatPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoPictureResourceKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkOffset2D codedOffset;
	public VkExtent2D codedExtent;
	public uint baseArrayLayer;
	public VkImageView imageViewBinding;
	public VkVideoPictureResourceKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoPictureResourceKHR;
		#else
		this = default;
		sType = VkStructureType.VideoPictureResourceKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoReferenceSlotKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public sbyte slotIndex;
	public unsafe VkVideoPictureResourceKHR* pPictureResource;
	public VkVideoReferenceSlotKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoReferenceSlotKHR;
		#else
		this = default;
		sType = VkStructureType.VideoReferenceSlotKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoGetMemoryPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryBindIndex;
	public unsafe VkMemoryRequirements2* pMemoryRequirements;
	public VkVideoGetMemoryPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoGetMemoryPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoGetMemoryPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoBindMemoryKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint memoryBindIndex;
	public VkDeviceMemory memory;
	public ulong memoryOffset;
	public ulong memorySize;
	public VkVideoBindMemoryKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoBindMemoryKHR;
		#else
		this = default;
		sType = VkStructureType.VideoBindMemoryKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint queueFamilyIndex;
	public VkVideoSessionCreateFlagsKHR flags;
	public unsafe VkVideoProfileKHR* pVideoProfile;
	public VkFormat pictureFormat;
	public VkExtent2D maxCodedExtent;
	public VkFormat referencePicturesFormat;
	public uint maxReferencePicturesSlotsCount;
	public uint maxReferencePicturesActiveCount;
	public unsafe VkExtensionProperties* pStdHeaderVersion;
	public VkVideoSessionCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoSessionCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoSessionCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionParametersCreateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoSessionParametersKHR videoSessionParametersTemplate;
	public VkVideoSessionKHR videoSession;
	public VkVideoSessionParametersCreateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoSessionParametersCreateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoSessionParametersCreateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoSessionParametersUpdateInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint updateSequenceCount;
	public VkVideoSessionParametersUpdateInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoSessionParametersUpdateInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoSessionParametersUpdateInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoBeginCodingInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoBeginCodingFlagsKHR flags;
	public VkVideoCodingQualityPresetFlagsKHR codecQualityPreset;
	public VkVideoSessionKHR videoSession;
	public VkVideoSessionParametersKHR videoSessionParameters;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotKHR* pReferenceSlots;
	public VkVideoBeginCodingInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoBeginCodingInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoBeginCodingInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEndCodingInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEndCodingFlagsKHR flags;
	public VkVideoEndCodingInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEndCodingInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoEndCodingInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoCodingControlInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoCodingControlFlagsKHR flags;
	public VkVideoCodingControlInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoCodingControlInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoCodingControlInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoDecodeCapabilityFlagsKHR flags;
	public VkVideoDecodeCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoDecodeFlagsKHR flags;
	public VkBuffer srcBuffer;
	public ulong srcBufferOffset;
	public ulong srcBufferRange;
	public VkVideoPictureResourceKHR dstPictureResource;
	public unsafe VkVideoReferenceSlotKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotKHR* pReferenceSlots;
	public VkVideoDecodeInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePortabilitySubsetFeaturesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkBool32 constantAlphaColorBlendFactors;
	public VkBool32 events;
	public VkBool32 imageViewFormatReinterpretation;
	public VkBool32 imageViewFormatSwizzle;
	public VkBool32 imageView2DOn3DImage;
	public VkBool32 multisampleArrayImage;
	public VkBool32 mutableComparisonSamplers;
	public VkBool32 pointPolygons;
	public VkBool32 samplerMipLodBias;
	public VkBool32 separateStencilMaskRef;
	public VkBool32 shaderSampleRateInterpolationFunctions;
	public VkBool32 tessellationIsolines;
	public VkBool32 tessellationPointMode;
	public VkBool32 triangleFans;
	public VkBool32 vertexAttributeAccessBeyondStride;
	public VkPhysicalDevicePortabilitySubsetFeaturesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePortabilitySubsetFeaturesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePortabilitySubsetFeaturesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkPhysicalDevicePortabilitySubsetPropertiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint minVertexInputBindingStrideAlignment;
	public VkPhysicalDevicePortabilitySubsetPropertiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.PhysicalDevicePortabilitySubsetPropertiesKHR;
		#else
		this = default;
		sType = VkStructureType.PhysicalDevicePortabilitySubsetPropertiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeFlagsKHR flags;
	public uint qualityLevel;
	public VkBuffer dstBitstreamBuffer;
	public ulong dstBitstreamBufferOffset;
	public ulong dstBitstreamBufferMaxRange;
	public VkVideoPictureResourceKHR srcPictureResource;
	public unsafe VkVideoReferenceSlotKHR* pSetupReferenceSlot;
	public uint referenceSlotCount;
	public unsafe VkVideoReferenceSlotKHR* pReferenceSlots;
	public uint precedingExternallyEncodedBytes;
	public VkVideoEncodeInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeCapabilitiesKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeCapabilityFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlModes;
	public byte rateControlLayerCount;
	public byte qualityLevelCount;
	public VkExtent2D inputImageDataFillAlignment;
	public VkVideoEncodeCapabilitiesKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeCapabilitiesKHR;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeCapabilitiesKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeRateControlLayerInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint averageBitrate;
	public uint maxBitrate;
	public uint frameRateNumerator;
	public uint frameRateDenominator;
	public uint virtualBufferSizeInMs;
	public uint initialVirtualBufferSizeInMs;
	public VkVideoEncodeRateControlLayerInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeRateControlLayerInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeRateControlLayerInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeRateControlInfoKHR
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeRateControlFlagsKHR flags;
	public VkVideoEncodeRateControlModeFlagsKHR rateControlMode;
	public byte layerCount;
	public unsafe VkVideoEncodeRateControlLayerInfoKHR* pLayerConfigs;
	public VkVideoEncodeRateControlInfoKHR()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeRateControlInfoKHR;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeRateControlInfoKHR;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint color_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint timing_info_present_flag;
	public uint fixed_frame_rate_flag;
	public uint bitstream_restriction_flag;
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264HrdParameters
{
	public byte cpb_cnt_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public unsafe fixed uint bit_rate_value_minus1[32];
	public unsafe fixed uint cpb_size_value_minus1[32];
	public unsafe fixed byte cbr_flag[32];
	public uint initial_cpb_removal_delay_length_minus1;
	public uint cpb_removal_delay_length_minus1;
	public uint dpb_output_delay_length_minus1;
	public uint time_offset_length;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SequenceParameterSetVui
{
	public StdVideoH264SpsVuiFlags flags;
	public StdVideoH264AspectRatioIdc aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte color_primaries;
	public byte transfer_characteristics;
	public byte matrix_coefficients;
	public uint num_units_in_tick;
	public uint time_scale;
	public unsafe StdVideoH264HrdParameters* pHrdParameters;
	public byte max_num_reorder_frames;
	public byte max_dec_frame_buffering;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SpsFlags
{
	public uint constraint_set0_flag;
	public uint constraint_set1_flag;
	public uint constraint_set2_flag;
	public uint constraint_set3_flag;
	public uint constraint_set4_flag;
	public uint constraint_set5_flag;
	public uint direct_8x8_inference_flag;
	public uint mb_adaptive_frame_field_flag;
	public uint frame_mbs_only_flag;
	public uint delta_pic_order_always_zero_flag;
	public uint separate_colour_plane_flag;
	public uint gaps_in_frame_num_value_allowed_flag;
	public uint qpprime_y_zero_transform_bypass_flag;
	public uint frame_cropping_flag;
	public uint seq_scaling_matrix_present_flag;
	public uint vui_parameters_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264ScalingLists
{
	public byte scaling_list_present_mask;
	public byte use_default_scaling_matrix_mask;
	public unsafe byte* ScalingList4x4_0;
	public unsafe byte* ScalingList4x4_1;
	public unsafe byte* ScalingList4x4_2;
	public unsafe byte* ScalingList4x4_3;
	public unsafe byte* ScalingList4x4_4;
	public unsafe byte* ScalingList4x4_5;
	public unsafe byte* ScalingList8x8_0;
	public unsafe byte* ScalingList8x8_1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264SequenceParameterSet
{
	public StdVideoH264SpsFlags flags;
	public StdVideoH264ProfileIdc profile_idc;
	public StdVideoH264Level level_idc;
	public byte seq_parameter_set_id;
	public StdVideoH264ChromaFormatIdc chroma_format_idc;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_frame_num_minus4;
	public StdVideoH264PocType pic_order_cnt_type;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public int offset_for_non_ref_pic;
	public int offset_for_top_to_bottom_field;
	public byte num_ref_frames_in_pic_order_cnt_cycle;
	public byte max_num_ref_frames;
	public uint pic_width_in_mbs_minus1;
	public uint pic_height_in_map_units_minus1;
	public uint frame_crop_left_offset;
	public uint frame_crop_right_offset;
	public uint frame_crop_top_offset;
	public uint frame_crop_bottom_offset;
	public unsafe int* pOffsetForRefFrame;
	public unsafe StdVideoH264ScalingLists* pScalingLists;
	public unsafe StdVideoH264SequenceParameterSetVui* pSequenceParameterSetVui;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264PpsFlags
{
	public uint transform_8x8_mode_flag;
	public uint redundant_pic_cnt_present_flag;
	public uint constrained_intra_pred_flag;
	public uint deblocking_filter_control_present_flag;
	public uint weighted_bipred_idc_flag;
	public uint weighted_pred_flag;
	public uint pic_order_present_flag;
	public uint entropy_coding_mode_flag;
	public uint pic_scaling_matrix_present_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH264PictureParameterSet
{
	public StdVideoH264PpsFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public StdVideoH264WeightedBipredIdc weighted_bipred_idc;
	public sbyte pic_init_qp_minus26;
	public sbyte pic_init_qs_minus26;
	public sbyte chroma_qp_index_offset;
	public sbyte second_chroma_qp_index_offset;
	public unsafe StdVideoH264ScalingLists* pScalingLists;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264WeightTableFlags
{
	public uint luma_weight_l0_flag;
	public uint chroma_weight_l0_flag;
	public uint luma_weight_l1_flag;
	public uint chroma_weight_l1_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264WeightTable
{
	public StdVideoEncodeH264WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public byte chroma_log2_weight_denom;
	public unsafe fixed sbyte luma_weight_l0[32];
	public unsafe fixed sbyte luma_offset_l0[32];
	public unsafe sbyte* chroma_weight_l0_0;
	public unsafe sbyte* chroma_weight_l0_1;
	public unsafe sbyte* chroma_weight_l0_2;
	public unsafe sbyte* chroma_weight_l0_3;
	public unsafe sbyte* chroma_weight_l0_4;
	public unsafe sbyte* chroma_weight_l0_5;
	public unsafe sbyte* chroma_weight_l0_6;
	public unsafe sbyte* chroma_weight_l0_7;
	public unsafe sbyte* chroma_weight_l0_8;
	public unsafe sbyte* chroma_weight_l0_9;
	public unsafe sbyte* chroma_weight_l0_10;
	public unsafe sbyte* chroma_weight_l0_11;
	public unsafe sbyte* chroma_weight_l0_12;
	public unsafe sbyte* chroma_weight_l0_13;
	public unsafe sbyte* chroma_weight_l0_14;
	public unsafe sbyte* chroma_weight_l0_15;
	public unsafe sbyte* chroma_weight_l0_16;
	public unsafe sbyte* chroma_weight_l0_17;
	public unsafe sbyte* chroma_weight_l0_18;
	public unsafe sbyte* chroma_weight_l0_19;
	public unsafe sbyte* chroma_weight_l0_20;
	public unsafe sbyte* chroma_weight_l0_21;
	public unsafe sbyte* chroma_weight_l0_22;
	public unsafe sbyte* chroma_weight_l0_23;
	public unsafe sbyte* chroma_weight_l0_24;
	public unsafe sbyte* chroma_weight_l0_25;
	public unsafe sbyte* chroma_weight_l0_26;
	public unsafe sbyte* chroma_weight_l0_27;
	public unsafe sbyte* chroma_weight_l0_28;
	public unsafe sbyte* chroma_weight_l0_29;
	public unsafe sbyte* chroma_weight_l0_30;
	public unsafe sbyte* chroma_weight_l0_31;
	public unsafe sbyte* chroma_offset_l0_0;
	public unsafe sbyte* chroma_offset_l0_1;
	public unsafe sbyte* chroma_offset_l0_2;
	public unsafe sbyte* chroma_offset_l0_3;
	public unsafe sbyte* chroma_offset_l0_4;
	public unsafe sbyte* chroma_offset_l0_5;
	public unsafe sbyte* chroma_offset_l0_6;
	public unsafe sbyte* chroma_offset_l0_7;
	public unsafe sbyte* chroma_offset_l0_8;
	public unsafe sbyte* chroma_offset_l0_9;
	public unsafe sbyte* chroma_offset_l0_10;
	public unsafe sbyte* chroma_offset_l0_11;
	public unsafe sbyte* chroma_offset_l0_12;
	public unsafe sbyte* chroma_offset_l0_13;
	public unsafe sbyte* chroma_offset_l0_14;
	public unsafe sbyte* chroma_offset_l0_15;
	public unsafe sbyte* chroma_offset_l0_16;
	public unsafe sbyte* chroma_offset_l0_17;
	public unsafe sbyte* chroma_offset_l0_18;
	public unsafe sbyte* chroma_offset_l0_19;
	public unsafe sbyte* chroma_offset_l0_20;
	public unsafe sbyte* chroma_offset_l0_21;
	public unsafe sbyte* chroma_offset_l0_22;
	public unsafe sbyte* chroma_offset_l0_23;
	public unsafe sbyte* chroma_offset_l0_24;
	public unsafe sbyte* chroma_offset_l0_25;
	public unsafe sbyte* chroma_offset_l0_26;
	public unsafe sbyte* chroma_offset_l0_27;
	public unsafe sbyte* chroma_offset_l0_28;
	public unsafe sbyte* chroma_offset_l0_29;
	public unsafe sbyte* chroma_offset_l0_30;
	public unsafe sbyte* chroma_offset_l0_31;
	public unsafe fixed sbyte luma_weight_l1[32];
	public unsafe fixed sbyte luma_offset_l1[32];
	public unsafe sbyte* chroma_weight_l1_0;
	public unsafe sbyte* chroma_weight_l1_1;
	public unsafe sbyte* chroma_weight_l1_2;
	public unsafe sbyte* chroma_weight_l1_3;
	public unsafe sbyte* chroma_weight_l1_4;
	public unsafe sbyte* chroma_weight_l1_5;
	public unsafe sbyte* chroma_weight_l1_6;
	public unsafe sbyte* chroma_weight_l1_7;
	public unsafe sbyte* chroma_weight_l1_8;
	public unsafe sbyte* chroma_weight_l1_9;
	public unsafe sbyte* chroma_weight_l1_10;
	public unsafe sbyte* chroma_weight_l1_11;
	public unsafe sbyte* chroma_weight_l1_12;
	public unsafe sbyte* chroma_weight_l1_13;
	public unsafe sbyte* chroma_weight_l1_14;
	public unsafe sbyte* chroma_weight_l1_15;
	public unsafe sbyte* chroma_weight_l1_16;
	public unsafe sbyte* chroma_weight_l1_17;
	public unsafe sbyte* chroma_weight_l1_18;
	public unsafe sbyte* chroma_weight_l1_19;
	public unsafe sbyte* chroma_weight_l1_20;
	public unsafe sbyte* chroma_weight_l1_21;
	public unsafe sbyte* chroma_weight_l1_22;
	public unsafe sbyte* chroma_weight_l1_23;
	public unsafe sbyte* chroma_weight_l1_24;
	public unsafe sbyte* chroma_weight_l1_25;
	public unsafe sbyte* chroma_weight_l1_26;
	public unsafe sbyte* chroma_weight_l1_27;
	public unsafe sbyte* chroma_weight_l1_28;
	public unsafe sbyte* chroma_weight_l1_29;
	public unsafe sbyte* chroma_weight_l1_30;
	public unsafe sbyte* chroma_weight_l1_31;
	public unsafe sbyte* chroma_offset_l1_0;
	public unsafe sbyte* chroma_offset_l1_1;
	public unsafe sbyte* chroma_offset_l1_2;
	public unsafe sbyte* chroma_offset_l1_3;
	public unsafe sbyte* chroma_offset_l1_4;
	public unsafe sbyte* chroma_offset_l1_5;
	public unsafe sbyte* chroma_offset_l1_6;
	public unsafe sbyte* chroma_offset_l1_7;
	public unsafe sbyte* chroma_offset_l1_8;
	public unsafe sbyte* chroma_offset_l1_9;
	public unsafe sbyte* chroma_offset_l1_10;
	public unsafe sbyte* chroma_offset_l1_11;
	public unsafe sbyte* chroma_offset_l1_12;
	public unsafe sbyte* chroma_offset_l1_13;
	public unsafe sbyte* chroma_offset_l1_14;
	public unsafe sbyte* chroma_offset_l1_15;
	public unsafe sbyte* chroma_offset_l1_16;
	public unsafe sbyte* chroma_offset_l1_17;
	public unsafe sbyte* chroma_offset_l1_18;
	public unsafe sbyte* chroma_offset_l1_19;
	public unsafe sbyte* chroma_offset_l1_20;
	public unsafe sbyte* chroma_offset_l1_21;
	public unsafe sbyte* chroma_offset_l1_22;
	public unsafe sbyte* chroma_offset_l1_23;
	public unsafe sbyte* chroma_offset_l1_24;
	public unsafe sbyte* chroma_offset_l1_25;
	public unsafe sbyte* chroma_offset_l1_26;
	public unsafe sbyte* chroma_offset_l1_27;
	public unsafe sbyte* chroma_offset_l1_28;
	public unsafe sbyte* chroma_offset_l1_29;
	public unsafe sbyte* chroma_offset_l1_30;
	public unsafe sbyte* chroma_offset_l1_31;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264SliceHeaderFlags
{
	public uint direct_spatial_mv_pred_flag;
	public uint num_ref_idx_active_override_flag;
	public uint no_output_of_prior_pics_flag;
	public uint adaptive_ref_pic_marking_mode_flag;
	public uint no_prior_references_available_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264PictureInfoFlags
{
	public uint idr_flag;
	public uint is_reference_flag;
	public uint used_for_long_term_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefMgmtFlags
{
	public uint ref_pic_list_modification_l0_flag;
	public uint ref_pic_list_modification_l1_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefListModEntry
{
	public StdVideoH264ModificationOfPicNumsIdc modification_of_pic_nums_idc;
	public ushort abs_diff_pic_num_minus1;
	public ushort long_term_pic_num;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefPicMarkingEntry
{
	public StdVideoH264MemMgmtControlOp operation;
	public ushort difference_of_pic_nums_minus1;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
	public ushort max_long_term_frame_idx_plus1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264RefMemMgmtCtrlOperations
{
	public StdVideoEncodeH264RefMgmtFlags flags;
	public byte refList0ModOpCount;
	public unsafe StdVideoEncodeH264RefListModEntry* pRefList0ModOperations;
	public byte refList1ModOpCount;
	public unsafe StdVideoEncodeH264RefListModEntry* pRefList1ModOperations;
	public byte refPicMarkingOpCount;
	public unsafe StdVideoEncodeH264RefPicMarkingEntry* pRefPicMarkingOperations;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264PictureInfo
{
	public StdVideoEncodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public StdVideoH264PictureType pictureType;
	public uint frame_num;
	public int PicOrderCnt;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264ReferenceInfo
{
	public StdVideoEncodeH264ReferenceInfoFlags flags;
	public uint FrameNum;
	public int PicOrderCnt;
	public ushort long_term_pic_num;
	public ushort long_term_frame_idx;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH264SliceHeader
{
	public StdVideoEncodeH264SliceHeaderFlags flags;
	public uint first_mb_in_slice;
	public StdVideoH264SliceType slice_type;
	public ushort idr_pic_id;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public StdVideoH264CabacInitIdc cabac_init_idc;
	public StdVideoH264DisableDeblockingFilterIdc disable_deblocking_filter_idc;
	public sbyte slice_alpha_c0_offset_div2;
	public sbyte slice_beta_offset_div2;
	public unsafe StdVideoEncodeH264WeightTable* pWeightTable;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeH264CapabilityFlagsEXT flags;
	public VkVideoEncodeH264InputModeFlagsEXT inputModeFlags;
	public VkVideoEncodeH264OutputModeFlagsEXT outputModeFlags;
	public byte maxPPictureL0ReferenceCount;
	public byte maxBPictureL0ReferenceCount;
	public byte maxL1ReferenceCount;
	public VkBool32 motionVectorsOverPicBoundariesFlag;
	public uint maxBytesPerPicDenom;
	public uint maxBitsPerMbDenom;
	public uint log2MaxMvLengthHorizontal;
	public uint log2MaxMvLengthVertical;
	public VkVideoEncodeH264CapabilitiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264CapabilitiesEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264CapabilitiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint spsStdCount;
	public unsafe StdVideoH264SequenceParameterSet* pSpsStd;
	public uint ppsStdCount;
	public unsafe StdVideoH264PictureParameterSet* pPpsStd;
	public VkVideoEncodeH264SessionParametersAddInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264SessionParametersAddInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264SessionParametersAddInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxSpsStdCount;
	public uint maxPpsStdCount;
	public unsafe VkVideoEncodeH264SessionParametersAddInfoEXT* pParametersAddInfo;
	public VkVideoEncodeH264SessionParametersCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264SessionParametersCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264SessionParametersCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public sbyte slotIndex;
	public unsafe StdVideoEncodeH264ReferenceInfo* pStdReferenceInfo;
	public VkVideoEncodeH264DpbSlotInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264DpbSlotInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264DpbSlotInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264ReferenceListsEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte referenceList0EntryCount;
	public unsafe VkVideoEncodeH264DpbSlotInfoEXT* pReferenceList0Entries;
	public byte referenceList1EntryCount;
	public unsafe VkVideoEncodeH264DpbSlotInfoEXT* pReferenceList1Entries;
	public unsafe StdVideoEncodeH264RefMemMgmtCtrlOperations* pMemMgmtCtrlOperations;
	public VkVideoEncodeH264ReferenceListsEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264ReferenceListsEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264ReferenceListsEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264NaluSliceEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint mbCount;
	public unsafe VkVideoEncodeH264ReferenceListsEXT* pReferenceFinalLists;
	public unsafe StdVideoEncodeH264SliceHeader* pSliceHeaderStd;
	public VkVideoEncodeH264NaluSliceEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264NaluSliceEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264NaluSliceEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264VclFrameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkVideoEncodeH264ReferenceListsEXT* pReferenceFinalLists;
	public uint naluSliceEntryCount;
	public unsafe VkVideoEncodeH264NaluSliceEXT* pNaluSliceEntries;
	public unsafe StdVideoEncodeH264PictureInfo* pCurrentPictureInfo;
	public VkVideoEncodeH264VclFrameInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264VclFrameInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264VclFrameInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264EmitPictureParametersEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte spsId;
	public VkBool32 emitSpsEnable;
	public uint ppsIdEntryCount;
	public unsafe byte* ppsIdEntries;
	public VkVideoEncodeH264EmitPictureParametersEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264EmitPictureParametersEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264EmitPictureParametersEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264ProfileEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;
	public VkVideoEncodeH264ProfileEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264ProfileEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264ProfileEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264RateControlInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public VkVideoEncodeH264RateControlStructureFlagsEXT rateControlStructure;
	public byte temporalLayerCount;
	public VkVideoEncodeH264RateControlInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264RateControlInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264RateControlInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264QpEXT
{
	public int qpI;
	public int qpP;
	public int qpB;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264FrameSizeEXT
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH264RateControlLayerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte temporalLayerId;
	public VkBool32 useInitialRcQp;
	public VkVideoEncodeH264QpEXT initialRcQp;
	public VkBool32 useMinQp;
	public VkVideoEncodeH264QpEXT minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH264QpEXT maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH264FrameSizeEXT maxFrameSize;
	public VkVideoEncodeH264RateControlLayerInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH264RateControlLayerInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH264RateControlLayerInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265DecPicBufMgr
{
	public unsafe fixed uint max_latency_increase_plus1[7];
	public unsafe fixed byte max_dec_pic_buffering_minus1[7];
	public unsafe fixed byte max_num_reorder_pics[7];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SubLayerHrdParameters
{
	public unsafe fixed uint bit_rate_value_minus1[32];
	public unsafe fixed uint cpb_size_value_minus1[32];
	public unsafe fixed uint cpb_size_du_value_minus1[32];
	public unsafe fixed uint bit_rate_du_value_minus1[32];
	public uint cbr_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265HrdFlags
{
	public uint nal_hrd_parameters_present_flag;
	public uint vcl_hrd_parameters_present_flag;
	public uint sub_pic_hrd_params_present_flag;
	public uint sub_pic_cpb_params_in_pic_timing_sei_flag;
	public uint fixed_pic_rate_general_flag;
	public uint fixed_pic_rate_within_cvs_flag;
	public uint low_delay_hrd_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265HrdParameters
{
	public StdVideoH265HrdFlags flags;
	public byte tick_divisor_minus2;
	public byte du_cpb_removal_delay_increment_length_minus1;
	public byte dpb_output_delay_du_length_minus1;
	public byte bit_rate_scale;
	public byte cpb_size_scale;
	public byte cpb_size_du_scale;
	public byte initial_cpb_removal_delay_length_minus1;
	public byte au_cpb_removal_delay_length_minus1;
	public byte dpb_output_delay_length_minus1;
	public unsafe fixed byte cpb_cnt_minus1[7];
	public unsafe fixed ushort elemental_duration_in_tc_minus1[7];
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_0;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_1;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_2;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_3;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_4;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_5;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersNal_6;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_0;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_1;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_2;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_3;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_4;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_5;
	public unsafe StdVideoH265SubLayerHrdParameters* pSubLayerHrdParametersVcl_6;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265VpsFlags
{
	public uint vps_temporal_id_nesting_flag;
	public uint vps_sub_layer_ordering_info_present_flag;
	public uint vps_timing_info_present_flag;
	public uint vps_poc_proportional_to_timing_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265VideoParameterSet
{
	public StdVideoH265VpsFlags flags;
	public byte vps_video_parameter_set_id;
	public byte vps_max_sub_layers_minus1;
	public uint vps_num_units_in_tick;
	public uint vps_time_scale;
	public uint vps_num_ticks_poc_diff_one_minus1;
	public unsafe StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public unsafe StdVideoH265HrdParameters* pHrdParameters;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265ScalingLists
{
	public unsafe byte* ScalingList4x4_0;
	public unsafe byte* ScalingList4x4_1;
	public unsafe byte* ScalingList4x4_2;
	public unsafe byte* ScalingList4x4_3;
	public unsafe byte* ScalingList4x4_4;
	public unsafe byte* ScalingList4x4_5;
	public unsafe byte* ScalingList8x8_0;
	public unsafe byte* ScalingList8x8_1;
	public unsafe byte* ScalingList8x8_2;
	public unsafe byte* ScalingList8x8_3;
	public unsafe byte* ScalingList8x8_4;
	public unsafe byte* ScalingList8x8_5;
	public unsafe byte* ScalingList16x16_0;
	public unsafe byte* ScalingList16x16_1;
	public unsafe byte* ScalingList16x16_2;
	public unsafe byte* ScalingList16x16_3;
	public unsafe byte* ScalingList16x16_4;
	public unsafe byte* ScalingList16x16_5;
	public unsafe byte* ScalingList32x32_0;
	public unsafe byte* ScalingList32x32_1;
	public unsafe fixed byte ScalingListDCCoef16x16[6];
	public unsafe fixed byte ScalingListDCCoef32x32[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SpsVuiFlags
{
	public uint aspect_ratio_info_present_flag;
	public uint overscan_info_present_flag;
	public uint overscan_appropriate_flag;
	public uint video_signal_type_present_flag;
	public uint video_full_range_flag;
	public uint colour_description_present_flag;
	public uint chroma_loc_info_present_flag;
	public uint neutral_chroma_indication_flag;
	public uint field_seq_flag;
	public uint frame_field_info_present_flag;
	public uint default_display_window_flag;
	public uint vui_timing_info_present_flag;
	public uint vui_poc_proportional_to_timing_flag;
	public uint vui_hrd_parameters_present_flag;
	public uint bitstream_restriction_flag;
	public uint tiles_fixed_structure_flag;
	public uint motion_vectors_over_pic_boundaries_flag;
	public uint restricted_ref_pic_lists_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SequenceParameterSetVui
{
	public StdVideoH265SpsVuiFlags flags;
	public byte aspect_ratio_idc;
	public ushort sar_width;
	public ushort sar_height;
	public byte video_format;
	public byte colour_primaries;
	public byte transfer_characteristics;
	public byte matrix_coeffs;
	public byte chroma_sample_loc_type_top_field;
	public byte chroma_sample_loc_type_bottom_field;
	public ushort def_disp_win_left_offset;
	public ushort def_disp_win_right_offset;
	public ushort def_disp_win_top_offset;
	public ushort def_disp_win_bottom_offset;
	public uint vui_num_units_in_tick;
	public uint vui_time_scale;
	public uint vui_num_ticks_poc_diff_one_minus1;
	public unsafe StdVideoH265HrdParameters* pHrdParameters;
	public ushort min_spatial_segmentation_idc;
	public byte max_bytes_per_pic_denom;
	public byte max_bits_per_min_cu_denom;
	public byte log2_max_mv_length_horizontal;
	public byte log2_max_mv_length_vertical;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PredictorPaletteEntries
{
	public unsafe ushort* PredictorPaletteEntries_0;
	public unsafe ushort* PredictorPaletteEntries_1;
	public unsafe ushort* PredictorPaletteEntries_2;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SpsFlags
{
	public uint sps_temporal_id_nesting_flag;
	public uint separate_colour_plane_flag;
	public uint scaling_list_enabled_flag;
	public uint sps_scaling_list_data_present_flag;
	public uint amp_enabled_flag;
	public uint sample_adaptive_offset_enabled_flag;
	public uint pcm_enabled_flag;
	public uint pcm_loop_filter_disabled_flag;
	public uint long_term_ref_pics_present_flag;
	public uint sps_temporal_mvp_enabled_flag;
	public uint strong_intra_smoothing_enabled_flag;
	public uint vui_parameters_present_flag;
	public uint sps_extension_present_flag;
	public uint sps_range_extension_flag;
	public uint transform_skip_rotation_enabled_flag;
	public uint transform_skip_context_enabled_flag;
	public uint implicit_rdpcm_enabled_flag;
	public uint explicit_rdpcm_enabled_flag;
	public uint extended_precision_processing_flag;
	public uint intra_smoothing_disabled_flag;
	public uint high_precision_offsets_enabled_flag;
	public uint persistent_rice_adaptation_enabled_flag;
	public uint cabac_bypass_alignment_enabled_flag;
	public uint sps_scc_extension_flag;
	public uint sps_curr_pic_ref_enabled_flag;
	public uint palette_mode_enabled_flag;
	public uint sps_palette_predictor_initializer_present_flag;
	public uint intra_boundary_filtering_disabled_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265SequenceParameterSet
{
	public StdVideoH265SpsFlags flags;
	public StdVideoH265ProfileIdc profile_idc;
	public StdVideoH265Level level_idc;
	public uint pic_width_in_luma_samples;
	public uint pic_height_in_luma_samples;
	public byte sps_video_parameter_set_id;
	public byte sps_max_sub_layers_minus1;
	public byte sps_seq_parameter_set_id;
	public byte chroma_format_idc;
	public byte bit_depth_luma_minus8;
	public byte bit_depth_chroma_minus8;
	public byte log2_max_pic_order_cnt_lsb_minus4;
	public unsafe fixed byte sps_max_dec_pic_buffering_minus1[8];
	public byte log2_min_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_luma_coding_block_size;
	public byte log2_min_luma_transform_block_size_minus2;
	public byte log2_diff_max_min_luma_transform_block_size;
	public byte max_transform_hierarchy_depth_inter;
	public byte max_transform_hierarchy_depth_intra;
	public byte num_short_term_ref_pic_sets;
	public byte num_long_term_ref_pics_sps;
	public byte pcm_sample_bit_depth_luma_minus1;
	public byte pcm_sample_bit_depth_chroma_minus1;
	public byte log2_min_pcm_luma_coding_block_size_minus3;
	public byte log2_diff_max_min_pcm_luma_coding_block_size;
	public uint conf_win_left_offset;
	public uint conf_win_right_offset;
	public uint conf_win_top_offset;
	public uint conf_win_bottom_offset;
	public unsafe StdVideoH265DecPicBufMgr* pDecPicBufMgr;
	public unsafe StdVideoH265ScalingLists* pScalingLists;
	public unsafe StdVideoH265SequenceParameterSetVui* pSequenceParameterSetVui;
	public byte palette_max_size;
	public byte delta_palette_max_predictor_size;
	public byte motion_vector_resolution_control_idc;
	public byte sps_num_palette_predictor_initializer_minus1;
	public unsafe StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PpsFlags
{
	public uint dependent_slice_segments_enabled_flag;
	public uint output_flag_present_flag;
	public uint sign_data_hiding_enabled_flag;
	public uint cabac_init_present_flag;
	public uint constrained_intra_pred_flag;
	public uint transform_skip_enabled_flag;
	public uint cu_qp_delta_enabled_flag;
	public uint pps_slice_chroma_qp_offsets_present_flag;
	public uint weighted_pred_flag;
	public uint weighted_bipred_flag;
	public uint transquant_bypass_enabled_flag;
	public uint tiles_enabled_flag;
	public uint entropy_coding_sync_enabled_flag;
	public uint uniform_spacing_flag;
	public uint loop_filter_across_tiles_enabled_flag;
	public uint pps_loop_filter_across_slices_enabled_flag;
	public uint deblocking_filter_control_present_flag;
	public uint deblocking_filter_override_enabled_flag;
	public uint pps_deblocking_filter_disabled_flag;
	public uint pps_scaling_list_data_present_flag;
	public uint lists_modification_present_flag;
	public uint slice_segment_header_extension_present_flag;
	public uint pps_extension_present_flag;
	public uint cross_component_prediction_enabled_flag;
	public uint chroma_qp_offset_list_enabled_flag;
	public uint pps_curr_pic_ref_enabled_flag;
	public uint residual_adaptive_colour_transform_enabled_flag;
	public uint pps_slice_act_qp_offsets_present_flag;
	public uint pps_palette_predictor_initializer_present_flag;
	public uint monochrome_palette_flag;
	public uint pps_range_extension_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoH265PictureParameterSet
{
	public StdVideoH265PpsFlags flags;
	public byte pps_pic_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte num_extra_slice_header_bits;
	public byte num_ref_idx_l0_default_active_minus1;
	public byte num_ref_idx_l1_default_active_minus1;
	public sbyte init_qp_minus26;
	public byte diff_cu_qp_delta_depth;
	public sbyte pps_cb_qp_offset;
	public sbyte pps_cr_qp_offset;
	public byte num_tile_columns_minus1;
	public byte num_tile_rows_minus1;
	public unsafe fixed ushort column_width_minus1[19];
	public unsafe fixed ushort row_height_minus1[21];
	public sbyte pps_beta_offset_div2;
	public sbyte pps_tc_offset_div2;
	public byte log2_parallel_merge_level_minus2;
	public unsafe StdVideoH265ScalingLists* pScalingLists;
	public byte log2_max_transform_skip_block_size_minus2;
	public byte diff_cu_chroma_qp_offset_depth;
	public byte chroma_qp_offset_list_len_minus1;
	public unsafe fixed sbyte cb_qp_offset_list[6];
	public unsafe fixed sbyte cr_qp_offset_list[6];
	public byte log2_sao_offset_scale_luma;
	public byte log2_sao_offset_scale_chroma;
	public sbyte pps_act_y_qp_offset_plus5;
	public sbyte pps_act_cb_qp_offset_plus5;
	public sbyte pps_act_cr_qp_offset_plus5;
	public byte pps_num_palette_predictor_initializer;
	public byte luma_bit_depth_entry_minus8;
	public byte chroma_bit_depth_entry_minus8;
	public unsafe StdVideoH265PredictorPaletteEntries* pPredictorPaletteEntries;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265WeightTableFlags
{
	public ushort luma_weight_l0_flag;
	public ushort chroma_weight_l0_flag;
	public ushort luma_weight_l1_flag;
	public ushort chroma_weight_l1_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265WeightTable
{
	public StdVideoEncodeH265WeightTableFlags flags;
	public byte luma_log2_weight_denom;
	public sbyte delta_chroma_log2_weight_denom;
	public unsafe fixed sbyte delta_luma_weight_l0[15];
	public unsafe fixed sbyte luma_offset_l0[15];
	public unsafe sbyte* delta_chroma_weight_l0_0;
	public unsafe sbyte* delta_chroma_weight_l0_1;
	public unsafe sbyte* delta_chroma_weight_l0_2;
	public unsafe sbyte* delta_chroma_weight_l0_3;
	public unsafe sbyte* delta_chroma_weight_l0_4;
	public unsafe sbyte* delta_chroma_weight_l0_5;
	public unsafe sbyte* delta_chroma_weight_l0_6;
	public unsafe sbyte* delta_chroma_weight_l0_7;
	public unsafe sbyte* delta_chroma_weight_l0_8;
	public unsafe sbyte* delta_chroma_weight_l0_9;
	public unsafe sbyte* delta_chroma_weight_l0_10;
	public unsafe sbyte* delta_chroma_weight_l0_11;
	public unsafe sbyte* delta_chroma_weight_l0_12;
	public unsafe sbyte* delta_chroma_weight_l0_13;
	public unsafe sbyte* delta_chroma_weight_l0_14;
	public unsafe sbyte* delta_chroma_offset_l0_0;
	public unsafe sbyte* delta_chroma_offset_l0_1;
	public unsafe sbyte* delta_chroma_offset_l0_2;
	public unsafe sbyte* delta_chroma_offset_l0_3;
	public unsafe sbyte* delta_chroma_offset_l0_4;
	public unsafe sbyte* delta_chroma_offset_l0_5;
	public unsafe sbyte* delta_chroma_offset_l0_6;
	public unsafe sbyte* delta_chroma_offset_l0_7;
	public unsafe sbyte* delta_chroma_offset_l0_8;
	public unsafe sbyte* delta_chroma_offset_l0_9;
	public unsafe sbyte* delta_chroma_offset_l0_10;
	public unsafe sbyte* delta_chroma_offset_l0_11;
	public unsafe sbyte* delta_chroma_offset_l0_12;
	public unsafe sbyte* delta_chroma_offset_l0_13;
	public unsafe sbyte* delta_chroma_offset_l0_14;
	public unsafe fixed sbyte delta_luma_weight_l1[15];
	public unsafe fixed sbyte luma_offset_l1[15];
	public unsafe sbyte* delta_chroma_weight_l1_0;
	public unsafe sbyte* delta_chroma_weight_l1_1;
	public unsafe sbyte* delta_chroma_weight_l1_2;
	public unsafe sbyte* delta_chroma_weight_l1_3;
	public unsafe sbyte* delta_chroma_weight_l1_4;
	public unsafe sbyte* delta_chroma_weight_l1_5;
	public unsafe sbyte* delta_chroma_weight_l1_6;
	public unsafe sbyte* delta_chroma_weight_l1_7;
	public unsafe sbyte* delta_chroma_weight_l1_8;
	public unsafe sbyte* delta_chroma_weight_l1_9;
	public unsafe sbyte* delta_chroma_weight_l1_10;
	public unsafe sbyte* delta_chroma_weight_l1_11;
	public unsafe sbyte* delta_chroma_weight_l1_12;
	public unsafe sbyte* delta_chroma_weight_l1_13;
	public unsafe sbyte* delta_chroma_weight_l1_14;
	public unsafe sbyte* delta_chroma_offset_l1_0;
	public unsafe sbyte* delta_chroma_offset_l1_1;
	public unsafe sbyte* delta_chroma_offset_l1_2;
	public unsafe sbyte* delta_chroma_offset_l1_3;
	public unsafe sbyte* delta_chroma_offset_l1_4;
	public unsafe sbyte* delta_chroma_offset_l1_5;
	public unsafe sbyte* delta_chroma_offset_l1_6;
	public unsafe sbyte* delta_chroma_offset_l1_7;
	public unsafe sbyte* delta_chroma_offset_l1_8;
	public unsafe sbyte* delta_chroma_offset_l1_9;
	public unsafe sbyte* delta_chroma_offset_l1_10;
	public unsafe sbyte* delta_chroma_offset_l1_11;
	public unsafe sbyte* delta_chroma_offset_l1_12;
	public unsafe sbyte* delta_chroma_offset_l1_13;
	public unsafe sbyte* delta_chroma_offset_l1_14;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265SliceSegmentHeaderFlags
{
	public uint first_slice_segment_in_pic_flag;
	public uint no_output_of_prior_pics_flag;
	public uint dependent_slice_segment_flag;
	public uint pic_output_flag;
	public uint short_term_ref_pic_set_sps_flag;
	public uint slice_temporal_mvp_enable_flag;
	public uint slice_sao_luma_flag;
	public uint slice_sao_chroma_flag;
	public uint num_ref_idx_active_override_flag;
	public uint mvd_l1_zero_flag;
	public uint cabac_init_flag;
	public uint slice_deblocking_filter_disable_flag;
	public uint collocated_from_l0_flag;
	public uint slice_loop_filter_across_slices_enabled_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265SliceSegmentHeader
{
	public StdVideoEncodeH265SliceSegmentHeaderFlags flags;
	public StdVideoH265SliceType slice_type;
	public byte num_short_term_ref_pic_sets;
	public uint slice_segment_address;
	public byte short_term_ref_pic_set_idx;
	public byte num_long_term_sps;
	public byte num_long_term_pics;
	public byte collocated_ref_idx;
	public byte num_ref_idx_l0_active_minus1;
	public byte num_ref_idx_l1_active_minus1;
	public byte MaxNumMergeCand;
	public sbyte slice_cb_qp_offset;
	public sbyte slice_cr_qp_offset;
	public sbyte slice_beta_offset_div2;
	public sbyte slice_tc_offset_div2;
	public sbyte slice_act_y_qp_offset;
	public sbyte slice_act_cb_qp_offset;
	public sbyte slice_act_cr_qp_offset;
	public unsafe StdVideoEncodeH265WeightTable* pWeightTable;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceModificationFlags
{
	public uint ref_pic_list_modification_flag_l0;
	public uint ref_pic_list_modification_flag_l1;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceModifications
{
	public StdVideoEncodeH265ReferenceModificationFlags flags;
	public byte referenceList0ModificationsCount;
	public unsafe byte* pReferenceList0Modifications;
	public byte referenceList1ModificationsCount;
	public unsafe byte* pReferenceList1Modifications;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265PictureInfoFlags
{
	public uint is_reference_flag;
	public uint IrapPicFlag;
	public uint long_term_flag;
	public uint discardable_flag;
	public uint cross_layer_bla_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265PictureInfo
{
	public StdVideoEncodeH265PictureInfoFlags flags;
	public StdVideoH265PictureType PictureType;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public int PicOrderCntVal;
	public byte TemporalId;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoEncodeH265ReferenceInfo
{
	public StdVideoEncodeH265ReferenceInfoFlags flags;
	public int PicOrderCntVal;
	public byte TemporalId;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public VkVideoEncodeH265CapabilityFlagsEXT flags;
	public VkVideoEncodeH265InputModeFlagsEXT inputModeFlags;
	public VkVideoEncodeH265OutputModeFlagsEXT outputModeFlags;
	public VkVideoEncodeH265CtbSizeFlagsEXT ctbSizes;
	public VkVideoEncodeH265TransformBlockSizeFlagsEXT transformBlockSizes;
	public byte maxPPictureL0ReferenceCount;
	public byte maxBPictureL0ReferenceCount;
	public byte maxL1ReferenceCount;
	public byte maxSubLayersCount;
	public byte minLog2MinLumaCodingBlockSizeMinus3;
	public byte maxLog2MinLumaCodingBlockSizeMinus3;
	public byte minLog2MinLumaTransformBlockSizeMinus2;
	public byte maxLog2MinLumaTransformBlockSizeMinus2;
	public byte minMaxTransformHierarchyDepthInter;
	public byte maxMaxTransformHierarchyDepthInter;
	public byte minMaxTransformHierarchyDepthIntra;
	public byte maxMaxTransformHierarchyDepthIntra;
	public byte maxDiffCuQpDeltaDepth;
	public byte minMaxNumMergeCand;
	public byte maxMaxNumMergeCand;
	public VkVideoEncodeH265CapabilitiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265CapabilitiesEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265CapabilitiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint vpsStdCount;
	public unsafe StdVideoH265VideoParameterSet* pVpsStd;
	public uint spsStdCount;
	public unsafe StdVideoH265SequenceParameterSet* pSpsStd;
	public uint ppsStdCount;
	public unsafe StdVideoH265PictureParameterSet* pPpsStd;
	public VkVideoEncodeH265SessionParametersAddInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265SessionParametersAddInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265SessionParametersAddInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVpsStdCount;
	public uint maxSpsStdCount;
	public uint maxPpsStdCount;
	public unsafe VkVideoEncodeH265SessionParametersAddInfoEXT* pParametersAddInfo;
	public VkVideoEncodeH265SessionParametersCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265SessionParametersCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265SessionParametersCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public sbyte slotIndex;
	public unsafe StdVideoEncodeH265ReferenceInfo* pStdReferenceInfo;
	public VkVideoEncodeH265DpbSlotInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265DpbSlotInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265DpbSlotInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265ReferenceListsEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte referenceList0EntryCount;
	public unsafe VkVideoEncodeH265DpbSlotInfoEXT* pReferenceList0Entries;
	public byte referenceList1EntryCount;
	public unsafe VkVideoEncodeH265DpbSlotInfoEXT* pReferenceList1Entries;
	public unsafe StdVideoEncodeH265ReferenceModifications* pReferenceModifications;
	public VkVideoEncodeH265ReferenceListsEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265ReferenceListsEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265ReferenceListsEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265NaluSliceSegmentEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint ctbCount;
	public unsafe VkVideoEncodeH265ReferenceListsEXT* pReferenceFinalLists;
	public unsafe StdVideoEncodeH265SliceSegmentHeader* pSliceSegmentHeaderStd;
	public VkVideoEncodeH265NaluSliceSegmentEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265NaluSliceSegmentEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265NaluSliceSegmentEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265VclFrameInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe VkVideoEncodeH265ReferenceListsEXT* pReferenceFinalLists;
	public uint naluSliceSegmentEntryCount;
	public unsafe VkVideoEncodeH265NaluSliceSegmentEXT* pNaluSliceSegmentEntries;
	public unsafe StdVideoEncodeH265PictureInfo* pCurrentPictureInfo;
	public VkVideoEncodeH265VclFrameInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265VclFrameInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265VclFrameInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265EmitPictureParametersEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte vpsId;
	public byte spsId;
	public VkBool32 emitVpsEnable;
	public VkBool32 emitSpsEnable;
	public uint ppsIdEntryCount;
	public unsafe byte* ppsIdEntries;
	public VkVideoEncodeH265EmitPictureParametersEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265EmitPictureParametersEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265EmitPictureParametersEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265ProfileEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;
	public VkVideoEncodeH265ProfileEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265ProfileEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265ProfileEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265RateControlInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint gopFrameCount;
	public uint idrPeriod;
	public uint consecutiveBFrameCount;
	public VkVideoEncodeH265RateControlStructureFlagsEXT rateControlStructure;
	public byte subLayerCount;
	public VkVideoEncodeH265RateControlInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265RateControlInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265RateControlInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265QpEXT
{
	public int qpI;
	public int qpP;
	public int qpB;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265FrameSizeEXT
{
	public uint frameISize;
	public uint framePSize;
	public uint frameBSize;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoEncodeH265RateControlLayerInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public byte temporalId;
	public VkBool32 useInitialRcQp;
	public VkVideoEncodeH265QpEXT initialRcQp;
	public VkBool32 useMinQp;
	public VkVideoEncodeH265QpEXT minQp;
	public VkBool32 useMaxQp;
	public VkVideoEncodeH265QpEXT maxQp;
	public VkBool32 useMaxFrameSize;
	public VkVideoEncodeH265FrameSizeEXT maxFrameSize;
	public VkVideoEncodeH265RateControlLayerInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoEncodeH265RateControlLayerInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoEncodeH265RateControlLayerInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264PictureInfoFlags
{
	public uint field_pic_flag;
	public uint is_intra;
	public uint IdrPicFlag;
	public uint bottom_field_flag;
	public uint is_reference;
	public uint complementary_field_pair;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264PictureInfo
{
	public StdVideoDecodeH264PictureInfoFlags flags;
	public byte seq_parameter_set_id;
	public byte pic_parameter_set_id;
	public ushort reserved;
	public ushort frame_num;
	public ushort idr_pic_id;
	public unsafe fixed int PicOrderCnt[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264ReferenceInfoFlags
{
	public uint top_field_flag;
	public uint bottom_field_flag;
	public uint used_for_long_term_reference;
	public uint is_non_existing;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264ReferenceInfo
{
	public StdVideoDecodeH264ReferenceInfoFlags flags;
	public ushort FrameNum;
	public ushort reserved;
	public unsafe fixed int PicOrderCnt[2];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264MvcElementFlags
{
	public uint non_idr;
	public uint anchor_pic;
	public uint inter_view;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264MvcElement
{
	public StdVideoDecodeH264MvcElementFlags flags;
	public ushort viewOrderIndex;
	public ushort viewId;
	public ushort temporalId;
	public ushort priorityId;
	public ushort numOfAnchorRefsInL0;
	public unsafe fixed ushort viewIdOfAnchorRefsInL0[15];
	public ushort numOfAnchorRefsInL1;
	public unsafe fixed ushort viewIdOfAnchorRefsInL1[15];
	public ushort numOfNonAnchorRefsInL0;
	public unsafe fixed ushort viewIdOfNonAnchorRefsInL0[15];
	public ushort numOfNonAnchorRefsInL1;
	public unsafe fixed ushort viewIdOfNonAnchorRefsInL1[15];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH264Mvc
{
	public uint viewId0;
	public uint mvcElementCount;
	public unsafe StdVideoDecodeH264MvcElement* pMvcElements;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264ProfileEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264ProfileIdc stdProfileIdc;
	public VkVideoDecodeH264PictureLayoutFlagsEXT pictureLayout;
	public VkVideoDecodeH264ProfileEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264ProfileEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264ProfileEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH264Level maxLevel;
	public VkOffset2D fieldOffsetGranularity;
	public VkVideoDecodeH264CapabilitiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264CapabilitiesEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264CapabilitiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint spsStdCount;
	public unsafe StdVideoH264SequenceParameterSet* pSpsStd;
	public uint ppsStdCount;
	public unsafe StdVideoH264PictureParameterSet* pPpsStd;
	public VkVideoDecodeH264SessionParametersAddInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264SessionParametersAddInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264SessionParametersAddInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxSpsStdCount;
	public uint maxPpsStdCount;
	public unsafe VkVideoDecodeH264SessionParametersAddInfoEXT* pParametersAddInfo;
	public VkVideoDecodeH264SessionParametersCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264SessionParametersCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264SessionParametersCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264PictureInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH264PictureInfo* pStdPictureInfo;
	public uint slicesCount;
	public unsafe uint* pSlicesDataOffsets;
	public VkVideoDecodeH264PictureInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264PictureInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264PictureInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264MvcEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH264Mvc* pStdMvc;
	public VkVideoDecodeH264MvcEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264MvcEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264MvcEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH264DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo;
	public VkVideoDecodeH264DpbSlotInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH264DpbSlotInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH264DpbSlotInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265PictureInfoFlags
{
	public uint IrapPicFlag;
	public uint IdrPicFlag;
	public uint IsReference;
	public uint short_term_ref_pic_set_sps_flag;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265PictureInfo
{
	public StdVideoDecodeH265PictureInfoFlags flags;
	public byte sps_video_parameter_set_id;
	public byte pps_seq_parameter_set_id;
	public byte pps_pic_parameter_set_id;
	public byte num_short_term_ref_pic_sets;
	public int PicOrderCntVal;
	public ushort NumBitsForSTRefPicSetInSlice;
	public byte NumDeltaPocsOfRefRpsIdx;
	public unsafe fixed byte RefPicSetStCurrBefore[8];
	public unsafe fixed byte RefPicSetStCurrAfter[8];
	public unsafe fixed byte RefPicSetLtCurr[8];
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265ReferenceInfoFlags
{
	public uint used_for_long_term_reference;
	public uint unused_for_reference;
	public uint is_non_existing;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct StdVideoDecodeH265ReferenceInfo
{
	public StdVideoDecodeH265ReferenceInfoFlags flags;
	public int PicOrderCntVal;
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265ProfileEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265ProfileIdc stdProfileIdc;
	public VkVideoDecodeH265ProfileEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265ProfileEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265ProfileEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265CapabilitiesEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public StdVideoH265Level maxLevel;
	public VkVideoDecodeH265CapabilitiesEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265CapabilitiesEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265CapabilitiesEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265SessionParametersAddInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint vpsStdCount;
	public unsafe StdVideoH265VideoParameterSet* pVpsStd;
	public uint spsStdCount;
	public unsafe StdVideoH265SequenceParameterSet* pSpsStd;
	public uint ppsStdCount;
	public unsafe StdVideoH265PictureParameterSet* pPpsStd;
	public VkVideoDecodeH265SessionParametersAddInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265SessionParametersAddInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265SessionParametersAddInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265SessionParametersCreateInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public uint maxVpsStdCount;
	public uint maxSpsStdCount;
	public uint maxPpsStdCount;
	public unsafe VkVideoDecodeH265SessionParametersAddInfoEXT* pParametersAddInfo;
	public VkVideoDecodeH265SessionParametersCreateInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265SessionParametersCreateInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265SessionParametersCreateInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265PictureInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH265PictureInfo* pStdPictureInfo;
	public uint slicesCount;
	public unsafe uint* pSlicesDataOffsets;
	public VkVideoDecodeH265PictureInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265PictureInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265PictureInfoEXT;
		#endif
	}
}

[StructLayout(LayoutKind.Sequential)]
public partial struct VkVideoDecodeH265DpbSlotInfoEXT
{
	public VkStructureType sType;
	public unsafe void* pNext;
	public unsafe StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo;
	public VkVideoDecodeH265DpbSlotInfoEXT()
	{
		#if NET6_0_OR_GREATER
		Unsafe.SkipInit(out this);
		sType = VkStructureType.VideoDecodeH265DpbSlotInfoEXT;
		#else
		this = default;
		sType = VkStructureType.VideoDecodeH265DpbSlotInfoEXT;
		#endif
	}
}

